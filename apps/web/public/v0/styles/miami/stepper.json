{
  "$schema": "https://nyxbui.design/schema/registry-item.json",
  "name": "stepper",
  "type": "registry:ui",
  "author": "nyxb (https://nyxbui.design)",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "collapsible"
  ],
  "files": [
    {
      "path": "ui/stepper.tsx",
      "content": "\"use client\"\n\nimport { cva } from \"class-variance-authority\"\nimport type { LucideIcon } from \"lucide-react\"\nimport { CheckIcon, Loader2, X } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n   Collapsible,\n   CollapsibleContent,\n} from \"@/components/ui/collapsible\"\n\n// <---------- CONTEXT ---------->\n\ninterface StepperContextValue extends StepperProps {\n   clickable?: boolean\n   isError?: boolean\n   isLoading?: boolean\n   isVertical?: boolean\n   stepCount?: number\n   expandVerticalSteps?: boolean\n   activeStep: number\n   initialStep: number\n}\n\nconst StepperContext = React.createContext<\n   StepperContextValue & {\n      nextStep: () => void\n      prevStep: () => void\n      resetSteps: () => void\n      setStep: (step: number) => void\n   }\n>({\n   steps: [],\n   activeStep: 0,\n   initialStep: 0,\n   nextStep: () => {},\n   prevStep: () => {},\n   resetSteps: () => {},\n   setStep: () => {},\n})\n\ninterface StepperContextProviderProps {\n   value: Omit<StepperContextValue, \"activeStep\">\n   children: React.ReactNode\n}\n\nfunction StepperProvider({ value, children }: StepperContextProviderProps) {\n   const isError = value.state === \"error\"\n   const isLoading = value.state === \"loading\"\n\n   const [activeStep, setActiveStep] = React.useState(value.initialStep)\n\n   const nextStep = () => {\n      setActiveStep((prev) => prev + 1)\n   }\n\n   const prevStep = () => {\n      setActiveStep((prev) => prev - 1)\n   }\n\n   const resetSteps = () => {\n      setActiveStep(value.initialStep)\n   }\n\n   const setStep = (step: number) => {\n      setActiveStep(step)\n   }\n\n   return (\n      <StepperContext.Provider\n         value={{\n            ...value,\n            isError,\n            isLoading,\n            activeStep,\n            nextStep,\n            prevStep,\n            resetSteps,\n            setStep,\n         }}\n      >\n         {children}\n      </StepperContext.Provider>\n   )\n}\n\n// <---------- HOOKS ---------->\n\nfunction usePrevious<T>(value: T): T | undefined {\n   const ref = React.useRef<T>()\n\n   React.useEffect(() => {\n      ref.current = value\n   }, [value])\n\n   return ref.current\n}\n\nfunction useStepper() {\n   const context = React.useContext(StepperContext)\n\n   if (context === undefined)\n      throw new Error(\"useStepper must be used within a StepperProvider\")\n\n   const { children, className, ...rest } = context\n\n   const isLastStep = context.activeStep === context.steps.length - 1\n   const hasCompletedAllSteps = context.activeStep === context.steps.length\n\n   const previousActiveStep = usePrevious(context.activeStep)\n\n   const currentStep = context.steps[context.activeStep]\n   const isOptionalStep = !!currentStep?.optional\n\n   const isDisabledStep = context.activeStep === 0\n\n   return {\n      ...rest,\n      isLastStep,\n      hasCompletedAllSteps,\n      isOptionalStep,\n      isDisabledStep,\n      currentStep,\n      previousActiveStep,\n   }\n}\n\nfunction useMediaQuery(query: string) {\n   const [value, setValue] = React.useState(false)\n\n   React.useEffect(() => {\n      function onChange(event: MediaQueryListEvent) {\n         setValue(event.matches)\n      }\n\n      const result = matchMedia(query)\n      result.addEventListener(\"change\", onChange)\n      setValue(result.matches)\n\n      return () => result.removeEventListener(\"change\", onChange)\n   }, [query])\n\n   return value\n}\n\n// <---------- STEPS ---------->\n\ninterface StepItem {\n   id?: string\n   label?: string\n   description?: string\n   icon?: IconType\n   optional?: boolean\n}\n\ninterface StepOptions {\n   orientation?: \"vertical\" | \"horizontal\"\n   state?: \"loading\" | \"error\"\n   responsive?: boolean\n   checkIcon?: IconType\n   errorIcon?: IconType\n   onClickStep?: (step: number, setStep: (step: number) => void) => void\n   mobileBreakpoint?: string\n   variant?: \"circle\" | \"circle-alt\" | \"line\"\n   expandVerticalSteps?: boolean\n   size?: \"sm\" | \"md\" | \"lg\"\n   styles?: {\n      /** Styles for the main container */\n      \"main-container\"?: string\n      /** Styles for the horizontal step */\n      \"horizontal-step\"?: string\n      /** Styles for the horizontal step container (button and labels) */\n      \"horizontal-step-container\"?: string\n      /** Styles for the vertical step */\n      \"vertical-step\"?: string\n      /** Styles for the vertical step container (button and labels) */\n      \"vertical-step-container\"?: string\n      /** Styles for the vertical step content */\n      \"vertical-step-content\"?: string\n      /** Styles for the step button container */\n      \"step-button-container\"?: string\n      /** Styles for the label and description container */\n      \"step-label-container\"?: string\n      /** Styles for the step label */\n      \"step-label\"?: string\n      /** Styles for the step description */\n      \"step-description\"?: string\n   }\n   variables?: {\n      \"--step-icon-size\"?: string\n      \"--step-gap\"?: string\n   }\n   scrollTracking?: boolean\n}\ninterface StepperProps extends StepOptions {\n   children?: React.ReactNode\n   className?: string\n   initialStep: number\n   steps: StepItem[]\n}\n\nconst VARIABLE_SIZES = {\n   sm: \"32px\",\n   md: \"36px\",\n   lg: \"40px\",\n}\n\nconst Stepper = React.forwardRef<HTMLDivElement, StepperProps>(\n   (props, ref: React.Ref<HTMLDivElement>) => {\n      const {\n         className,\n         children,\n         orientation: orientationProp,\n         state,\n         responsive,\n         checkIcon,\n         errorIcon,\n         onClickStep,\n         mobileBreakpoint,\n         expandVerticalSteps = false,\n         initialStep = 0,\n         size,\n         steps,\n         variant,\n         styles,\n         variables,\n         scrollTracking = false,\n         ...rest\n      } = props\n\n      const childArr = React.Children.toArray(children)\n\n      const items = [] as React.ReactElement[]\n\n      const footer = childArr.map((child, _index) => {\n         if (!React.isValidElement(child))\n            throw new Error(\"Stepper children must be valid React elements.\")\n\n         if (child.type === Step) {\n            items.push(child)\n            return null\n         }\n\n         return child\n      })\n\n      const stepCount = items.length\n\n      const isMobile = useMediaQuery(\n         `(max-width: ${mobileBreakpoint || \"768px\"})`,\n      )\n\n      const clickable = !!onClickStep\n\n      const orientation = isMobile && responsive ? \"vertical\" : orientationProp\n\n      const isVertical = orientation === \"vertical\"\n\n      return (\n         <StepperProvider\n            value={{\n               initialStep,\n               orientation,\n               state,\n               size,\n               responsive,\n               checkIcon,\n               errorIcon,\n               onClickStep,\n               clickable,\n               stepCount,\n               isVertical,\n               variant: variant || \"circle\",\n               expandVerticalSteps,\n               steps,\n               scrollTracking,\n               styles,\n            }}\n         >\n            <div\n               ref={ref}\n               className={cn(\n                  \"stepper__main-container\",\n                  \"flex w-full flex-wrap\",\n                  stepCount === 1 ? \"justify-end\" : \"justify-between\",\n                  orientation === \"vertical\" ? \"flex-col\" : \"flex-row\",\n                  variant === \"line\" && orientation === \"horizontal\" && \"gap-4\",\n                  className,\n                  styles?.[\"main-container\"],\n               )}\n               style={\n                  {\n                     \"--step-icon-size\":\n                        variables?.[\"--step-icon-size\"] ||\n                        `${VARIABLE_SIZES[size || \"md\"]}`,\n                     \"--step-gap\": variables?.[\"--step-gap\"] || \"8px\",\n                  } as React.CSSProperties\n               }\n               {...rest}\n            >\n               <VerticalContent>{items}</VerticalContent>\n            </div>\n            {orientation === \"horizontal\" && (\n               <HorizontalContent>{items}</HorizontalContent>\n            )}\n            {footer}\n         </StepperProvider>\n      )\n   },\n)\n\nStepper.defaultProps = {\n   size: \"md\",\n   orientation: \"horizontal\",\n   responsive: true,\n}\n\nfunction VerticalContent({ children }: { children: React.ReactNode }) {\n   const { activeStep } = useStepper()\n\n   const childArr = React.Children.toArray(children)\n   const stepCount = childArr.length\n\n   return (\n      <>\n         {React.Children.map(children, (child, i) => {\n            const isCompletedStep =\n               (React.isValidElement(child) &&\n                  (child.props as any).isCompletedStep) ??\n               i < activeStep\n            const isLastStep = i === stepCount - 1\n            const isCurrentStep = i === activeStep\n\n            const stepProps = {\n               index: i,\n               isCompletedStep,\n               isCurrentStep,\n               isLastStep,\n            }\n\n            if (React.isValidElement(child))\n               return React.cloneElement(child, stepProps)\n\n            return null\n         })}\n      </>\n   )\n}\n\nfunction HorizontalContent({ children }: { children: React.ReactNode }) {\n   const { activeStep } = useStepper()\n   const childArr = React.Children.toArray(children)\n\n   if (activeStep > childArr.length) return null\n\n   return (\n      <>\n         {React.Children.map(childArr[activeStep], (node) => {\n            if (!React.isValidElement(node)) return null\n\n            return React.Children.map(\n               node.props.children,\n               (childNode) => childNode,\n            )\n         })}\n      </>\n   )\n}\n\n// <---------- STEP ---------->\n\ninterface StepProps extends React.HTMLAttributes<HTMLLIElement> {\n   label?: string | React.ReactNode\n   description?: string\n   icon?: IconType\n   state?: \"loading\" | \"error\"\n   checkIcon?: IconType\n   errorIcon?: IconType\n   isCompletedStep?: boolean\n   isKeepError?: boolean\n   onClickStep?: (step: number, setStep: (step: number) => void) => void\n}\n\ninterface StepSharedProps extends StepProps {\n   isLastStep?: boolean\n   isCurrentStep?: boolean\n   index?: number\n   hasVisited: boolean | undefined\n   isError?: boolean\n   isLoading?: boolean\n}\n\n// Props which shouldn't be passed to to the Step component from the user\ninterface StepInternalConfig {\n   index: number\n   isCompletedStep?: boolean\n   isCurrentStep?: boolean\n   isLastStep?: boolean\n}\n\ninterface FullStepProps extends StepProps, StepInternalConfig {}\n\nconst Step = React.forwardRef<HTMLLIElement, StepProps>(\n   (props, ref: React.Ref<any>) => {\n      const {\n         children,\n         description,\n         icon,\n         state,\n         checkIcon,\n         errorIcon,\n         index,\n         isCompletedStep,\n         isCurrentStep,\n         isLastStep,\n         isKeepError,\n         label,\n         onClickStep,\n      } = props as FullStepProps\n\n      const { isVertical, isError, isLoading, clickable } = useStepper()\n\n      const hasVisited = isCurrentStep || isCompletedStep\n\n      const sharedProps = {\n         isLastStep,\n         isCompletedStep,\n         isCurrentStep,\n         index,\n         isError,\n         isLoading,\n         clickable,\n         label,\n         description,\n         hasVisited,\n         icon,\n         isKeepError,\n         checkIcon,\n         state,\n         errorIcon,\n         onClickStep,\n      }\n\n      const renderStep = () => {\n         switch (isVertical) {\n            case true:\n               return (\n                  <VerticalStep ref={ref} {...sharedProps}>\n                     {children}\n                  </VerticalStep>\n               )\n            default:\n               return <HorizontalStep ref={ref} {...sharedProps} />\n         }\n      }\n\n      return renderStep()\n   },\n)\n\n// <---------- VERTICAL STEP ---------->\n\ntype VerticalStepProps = StepSharedProps & {\n   children?: React.ReactNode\n}\n\nconst verticalStepVariants = cva(\n   [\n      \"flex flex-col relative transition-all duration-200\",\n      \"data-[completed=true]:[&:not(:last-child)]:after:bg-primary\",\n      \"data-[invalid=true]:[&:not(:last-child)]:after:bg-destructive\",\n   ],\n   {\n      variants: {\n         variant: {\n            circle: cn(\n               \"[&:not(:last-child)]:gap-[var(--step-gap)] [&:not(:last-child)]:pb-[var(--step-gap)]\",\n               \"[&:not(:last-child)]:after:bg-border [&:not(:last-child)]:after:w-[2px] [&:not(:last-child)]:after:content-['']\",\n               \"[&:not(:last-child)]:after:inset-x-[calc(var(--step-icon-size)/2)]\",\n               \"[&:not(:last-child)]:after:absolute\",\n               \"[&:not(:last-child)]:after:top-[calc(var(--step-icon-size)+var(--step-gap))]\",\n               \"[&:not(:last-child)]:after:bottom-[var(--step-gap)]\",\n               \"[&:not(:last-child)]:after:transition-all [&:not(:last-child)]:after:duration-200\",\n            ),\n            line: \"flex-1 border-t-0 mb-4\",\n         },\n      },\n   },\n)\n\nconst VerticalStep = React.forwardRef<HTMLDivElement, VerticalStepProps>(\n   (props, ref) => {\n      const {\n         children,\n         index,\n         isCompletedStep,\n         isCurrentStep,\n         label,\n         description,\n         icon,\n         hasVisited,\n         state,\n         checkIcon: checkIconProp,\n         errorIcon: errorIconProp,\n         onClickStep,\n      } = props\n\n      const {\n         checkIcon: checkIconContext,\n         errorIcon: errorIconContext,\n         isError,\n         isLoading,\n         variant,\n         onClickStep: onClickStepGeneral,\n         clickable,\n         expandVerticalSteps,\n         styles,\n         scrollTracking,\n         orientation,\n         steps,\n         setStep,\n         isLastStep: isLastStepCurrentStep,\n         previousActiveStep,\n      } = useStepper()\n\n      const opacity = hasVisited ? 1 : 0.8\n      const localIsLoading = isLoading || state === \"loading\"\n      const localIsError = isError || state === \"error\"\n\n      const isLastStep = index === steps.length - 1\n\n      const active =\n         variant === \"line\" ? isCompletedStep || isCurrentStep : isCompletedStep\n      const checkIcon = checkIconProp || checkIconContext\n      const errorIcon = errorIconProp || errorIconContext\n\n      const renderChildren = () => {\n         if (!expandVerticalSteps) {\n            return (\n               <Collapsible open={isCurrentStep}>\n                  <CollapsibleContent\n                     ref={(node) => {\n                        if (\n                           // If the step is the first step and the previous step\n                           // was the last step or if the step is not the first step\n                           // This prevents initial scrolling when the stepper\n                           // is located anywhere other than the top of the view.\n                           scrollTracking &&\n                           ((index === 0 &&\n                              previousActiveStep &&\n                              previousActiveStep === steps.length) ||\n                              (index && index > 0))\n                        ) {\n                           node?.scrollIntoView({\n                              behavior: \"smooth\",\n                              block: \"center\",\n                           })\n                        }\n                     }}\n                     className=\"data-[state=open]:animate-collapsible-down data-[state=closed]:animate-collapsible-up overflow-hidden\"\n                  >\n                     {children}\n                  </CollapsibleContent>\n               </Collapsible>\n            )\n         }\n         return children\n      }\n\n      return (\n         <div\n            ref={ref}\n            className={cn(\n               \"stepper__vertical-step\",\n               verticalStepVariants({\n                  variant: variant?.includes(\"circle\") ? \"circle\" : \"line\",\n               }),\n               isLastStepCurrentStep && \"gap-[var(--step-gap)]\",\n               styles?.[\"vertical-step\"],\n            )}\n            data-optional={steps[index || 0]?.optional}\n            data-completed={isCompletedStep}\n            data-active={active}\n            data-clickable={clickable || !!onClickStep}\n            data-invalid={localIsError}\n            onClick={() => {\n               if (onClickStep) onClickStep(index || 0, setStep)\n               else onClickStepGeneral?.(index || 0, setStep)\n            }}\n         >\n            <div\n               data-vertical\n               data-active={active}\n               className={cn(\n                  \"stepper__vertical-step-container\",\n                  \"flex items-center\",\n                  variant === \"line\" &&\n                     \"data-[active=true]:border-primary border-s-[3px] py-2 ps-3\",\n                  styles?.[\"vertical-step-container\"],\n               )}\n            >\n               <StepButtonContainer\n                  {...{\n                     isLoading: localIsLoading,\n                     isError: localIsError,\n                     ...props,\n                  }}\n               >\n                  <StepIcon\n                     {...{\n                        index,\n                        isError: localIsError,\n                        isLoading: localIsLoading,\n                        isCurrentStep,\n                        isCompletedStep,\n                     }}\n                     icon={icon}\n                     checkIcon={checkIcon}\n                     errorIcon={errorIcon}\n                  />\n               </StepButtonContainer>\n               <StepLabel\n                  label={label}\n                  description={description}\n                  {...{ isCurrentStep, opacity }}\n               />\n            </div>\n            <div\n               className={cn(\n                  \"stepper__vertical-step-content\",\n                  !isLastStep && \"min-h-4\",\n                  variant !== \"line\" && \"ps-[--step-icon-size]\",\n                  variant === \"line\" && orientation === \"vertical\" && \"min-h-0\",\n                  styles?.[\"vertical-step-content\"],\n               )}\n            >\n               {renderChildren()}\n            </div>\n         </div>\n      )\n   },\n)\n\n// <---------- HORIZONTAL STEP ---------->\n\nconst HorizontalStep = React.forwardRef<HTMLDivElement, StepSharedProps>(\n   (props, ref) => {\n      const {\n         isError,\n         isLoading,\n         onClickStep,\n         variant,\n         clickable,\n         checkIcon: checkIconContext,\n         errorIcon: errorIconContext,\n         styles,\n         steps,\n         setStep,\n      } = useStepper()\n\n      const {\n         index,\n         isCompletedStep,\n         isCurrentStep,\n         hasVisited,\n         icon,\n         label,\n         description,\n         isKeepError,\n         state,\n         checkIcon: checkIconProp,\n         errorIcon: errorIconProp,\n      } = props\n\n      const localIsLoading = isLoading || state === \"loading\"\n      const localIsError = isError || state === \"error\"\n\n      const opacity = hasVisited ? 1 : 0.8\n\n      const active =\n         variant === \"line\" ? isCompletedStep || isCurrentStep : isCompletedStep\n\n      const checkIcon = checkIconProp || checkIconContext\n      const errorIcon = errorIconProp || errorIconContext\n\n      return (\n         <div\n            aria-disabled={!hasVisited}\n            className={cn(\n               \"stepper__horizontal-step\",\n               \"relative flex items-center transition-all duration-200\",\n               \"[&:not(:last-child)]:flex-1\",\n               \"[&:not(:last-child)]:after:transition-all [&:not(:last-child)]:after:duration-200\",\n               \"[&:not(:last-child)]:after:bg-border [&:not(:last-child)]:after:h-[2px] [&:not(:last-child)]:after:content-['']\",\n               \"data-[completed=true]:[&:not(:last-child)]:after:bg-primary\",\n               \"data-[invalid=true]:[&:not(:last-child)]:after:bg-destructive\",\n               variant === \"circle-alt\" &&\n                  \"flex-1 flex-col justify-start [&:not(:last-child)]:after:relative [&:not(:last-child)]:after:end-[50%] [&:not(:last-child)]:after:start-[50%] [&:not(:last-child)]:after:top-[calc(var(--step-icon-size)/2)] [&:not(:last-child)]:after:-order-1 [&:not(:last-child)]:after:w-[calc((100%-var(--step-icon-size))-(var(--step-gap)))]\",\n               variant === \"circle\" &&\n                  \"[&:not(:last-child)]:after:me-[var(--step-gap)] [&:not(:last-child)]:after:ms-[var(--step-gap)] [&:not(:last-child)]:after:flex-1\",\n               variant === \"line\" &&\n                  \"data-[active=true]:border-primary flex-1 flex-col border-t-[3px]\",\n               styles?.[\"horizontal-step\"],\n            )}\n            data-optional={steps[index || 0]?.optional}\n            data-completed={isCompletedStep}\n            data-active={active}\n            data-invalid={localIsError}\n            data-clickable={clickable}\n            onClick={() => onClickStep?.(index || 0, setStep)}\n            ref={ref}\n         >\n            <div\n               className={cn(\n                  \"stepper__horizontal-step-container\",\n                  \"flex items-center\",\n                  variant === \"circle-alt\" && \"flex-col justify-center gap-1\",\n                  variant === \"line\" && \"w-full\",\n                  styles?.[\"horizontal-step-container\"],\n               )}\n            >\n               <StepButtonContainer\n                  {...{\n                     ...props,\n                     isError: localIsError,\n                     isLoading: localIsLoading,\n                  }}\n               >\n                  <StepIcon\n                     {...{\n                        index,\n                        isCompletedStep,\n                        isCurrentStep,\n                        isError: localIsError,\n                        isKeepError,\n                        isLoading: localIsLoading,\n                     }}\n                     icon={icon}\n                     checkIcon={checkIcon}\n                     errorIcon={errorIcon}\n                  />\n               </StepButtonContainer>\n               <StepLabel\n                  label={label}\n                  description={description}\n                  {...{ isCurrentStep, opacity }}\n               />\n            </div>\n         </div>\n      )\n   },\n)\n\n// <---------- STEP BUTTON CONTAINER ---------->\n\ntype StepButtonContainerProps = StepSharedProps & {\n   children?: React.ReactNode\n}\n\nfunction StepButtonContainer({\n   isCurrentStep,\n   isCompletedStep,\n   children,\n   isError,\n   isLoading: isLoadingProp,\n   onClickStep,\n}: StepButtonContainerProps) {\n   const {\n      clickable,\n      isLoading: isLoadingContext,\n      variant,\n      styles,\n   } = useStepper()\n\n   const currentStepClickable = clickable || !!onClickStep\n\n   const isLoading = isLoadingProp || isLoadingContext\n\n   if (variant === \"line\") return null\n\n   return (\n      <Button\n         variant=\"ghost\"\n         tabIndex={currentStepClickable ? 0 : -1}\n         className={cn(\n            \"stepper__step-button-container\",\n            \"pointer-events-none rounded-full p-0\",\n            \"size-[var(--step-icon-size)]\",\n            \"flex items-center justify-center rounded-full border-2\",\n            \"data-[clickable=true]:pointer-events-auto\",\n            \"data-[active=true]:bg-primary data-[active=true]:border-primary data-[active=true]:text-primary-foreground\",\n            \"data-[current=true]:border-primary data-[current=true]:bg-secondary\",\n            \"data-[invalid=true]:bg-destructive data-[invalid=true]:border-destructive data-[invalid=true]:text-destructive-foreground\",\n            styles?.[\"step-button-container\"],\n         )}\n         aria-current={isCurrentStep ? \"step\" : undefined}\n         data-current={isCurrentStep}\n         data-invalid={isError && (isCurrentStep || isCompletedStep)}\n         data-active={isCompletedStep}\n         data-clickable={currentStepClickable}\n         data-loading={isLoading && (isCurrentStep || isCompletedStep)}\n      >\n         {children}\n      </Button>\n   )\n}\n\n// <---------- STEP ICON ---------->\n\ntype IconType = LucideIcon | React.ComponentType<any> | undefined\n\nconst iconVariants = cva(\"\", {\n   variants: {\n      size: {\n         sm: \"size-4\",\n         md: \"size-4\",\n         lg: \"size-5\",\n      },\n   },\n   defaultVariants: {\n      size: \"md\",\n   },\n})\n\ninterface StepIconProps {\n   isCompletedStep?: boolean\n   isCurrentStep?: boolean\n   isError?: boolean\n   isLoading?: boolean\n   isKeepError?: boolean\n   icon?: IconType\n   index?: number\n   checkIcon?: IconType\n   errorIcon?: IconType\n}\n\nconst StepIcon = React.forwardRef<HTMLDivElement, StepIconProps>(\n   (props, ref) => {\n      const { size } = useStepper()\n\n      const {\n         isCompletedStep,\n         isCurrentStep,\n         isError,\n         isLoading,\n         isKeepError,\n         icon: CustomIcon,\n         index,\n         checkIcon: CustomCheckIcon,\n         errorIcon: CustomErrorIcon,\n      } = props\n\n      const Icon = React.useMemo(() => CustomIcon || null, [CustomIcon])\n\n      const ErrorIcon = React.useMemo(\n         () => CustomErrorIcon || null,\n         [CustomErrorIcon],\n      )\n\n      const Check = React.useMemo(\n         () => CustomCheckIcon || CheckIcon,\n         [CustomCheckIcon],\n      )\n\n      return React.useMemo(() => {\n         if (isCompletedStep) {\n            if (isError && isKeepError) {\n               return (\n                  <div key=\"icon\">\n                     <X className={cn(iconVariants({ size }))} />\n                  </div>\n               )\n            }\n            return (\n               <div key=\"check-icon\">\n                  <Check className={cn(iconVariants({ size }))} />\n               </div>\n            )\n         }\n         if (isCurrentStep) {\n            if (isError && ErrorIcon) {\n               return (\n                  <div key=\"error-icon\">\n                     <ErrorIcon className={cn(iconVariants({ size }))} />\n                  </div>\n               )\n            }\n            if (isError) {\n               return (\n                  <div key=\"icon\">\n                     <X className={cn(iconVariants({ size }))} />\n                  </div>\n               )\n            }\n            if (isLoading) {\n               return (\n                  <Loader2\n                     className={cn(iconVariants({ size }), \"animate-spin\")}\n                  />\n               )\n            }\n         }\n         if (Icon) {\n            return (\n               <div key=\"step-icon\">\n                  <Icon className={cn(iconVariants({ size }))} />\n               </div>\n            )\n         }\n         return (\n            <span\n               ref={ref}\n               key=\"label\"\n               className={cn(\"text-md text-center font-medium\")}\n            >\n               {(index || 0) + 1}\n            </span>\n         )\n      }, [\n         isCompletedStep,\n         isCurrentStep,\n         isError,\n         isLoading,\n         Icon,\n         index,\n         Check,\n         ErrorIcon,\n         isKeepError,\n         ref,\n         size,\n      ])\n   },\n)\n\n// <---------- STEP LABEL ---------->\n\ninterface StepLabelProps {\n   isCurrentStep?: boolean\n   opacity: number\n   label?: string | React.ReactNode\n   description?: string | null\n}\n\nconst labelVariants = cva(\"\", {\n   variants: {\n      size: {\n         sm: \"text-sm\",\n         md: \"text-sm\",\n         lg: \"text-base\",\n      },\n   },\n   defaultVariants: {\n      size: \"md\",\n   },\n})\n\nconst descriptionVariants = cva(\"\", {\n   variants: {\n      size: {\n         sm: \"text-xs\",\n         md: \"text-xs\",\n         lg: \"text-sm\",\n      },\n   },\n   defaultVariants: {\n      size: \"md\",\n   },\n})\n\nfunction StepLabel({\n   isCurrentStep,\n   opacity,\n   label,\n   description,\n}: StepLabelProps) {\n   const { variant, styles, size, orientation } = useStepper()\n   const shouldRender = !!label || !!description\n\n   return shouldRender ? (\n      <div\n         aria-current={isCurrentStep ? \"step\" : undefined}\n         className={cn(\n            \"stepper__step-label-container\",\n            \"flex flex-col\",\n            variant !== \"line\"\n               ? \"ms-2\"\n               : orientation === \"horizontal\" && \"my-2\",\n            variant === \"circle-alt\" && \"text-center\",\n            variant === \"circle-alt\" && orientation === \"horizontal\" && \"ms-0\",\n            variant === \"circle-alt\" &&\n               orientation === \"vertical\" &&\n               \"text-start\",\n            styles?.[\"step-label-container\"],\n         )}\n         style={{\n            opacity,\n         }}\n      >\n         {!!label && (\n            <span\n               className={cn(\n                  \"stepper__step-label\",\n                  labelVariants({ size }),\n                  styles?.[\"step-label\"],\n               )}\n            >\n               {label}\n            </span>\n         )}\n         {!!description && (\n            <span\n               className={cn(\n                  \"stepper__step-description\",\n                  \"text-muted-foreground\",\n                  descriptionVariants({ size }),\n                  styles?.[\"step-description\"],\n               )}\n            >\n               {description}\n            </span>\n         )}\n      </div>\n   ) : null\n}\n\nexport { Stepper, Step, useStepper }\nexport type { StepProps, StepperProps, StepItem }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}