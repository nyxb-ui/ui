{
  "$schema": "https://nyxbui.design/schema/registry-item.json",
  "name": "number-ticker",
  "type": "registry:ui",
  "author": "nyxb (https://nyxbui.design)",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "ui/number-ticker.tsx",
      "content": "\"use client\"\n\nimport { useInView, useMotionValue, useSpring } from \"framer-motion\"\nimport { useEffect, useRef } from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nexport default function NumberTicker({\n   value,\n   direction = \"up\",\n   delay = 0,\n   className,\n}: {\n   value: number\n   direction?: \"up\" | \"down\"\n   className?: string\n   delay?: number // delay in s\n}) {\n   const ref = useRef<HTMLSpanElement>(null)\n   const motionValue = useMotionValue(direction === \"down\" ? value : 0)\n   const springValue = useSpring(motionValue, {\n      damping: 60,\n      stiffness: 100,\n   })\n   const isInView = useInView(ref, { once: true, margin: \"0px\" })\n\n   useEffect(() => {\n      isInView &&\n         setTimeout(() => {\n            motionValue.set(direction === \"down\" ? 0 : value)\n         }, delay * 1000)\n   }, [motionValue, isInView, delay, value, direction])\n\n   useEffect(\n      () =>\n         springValue.on(\"change\", (latest) => {\n            if (ref.current) {\n               ref.current.textContent = Intl.NumberFormat(\"en-US\").format(\n                  Math.round(latest),\n               )\n            }\n         }),\n      [springValue],\n   )\n\n   return (\n      <span\n         className={cn(\n            \"inline-block tabular-nums tracking-wider text-black dark:text-white\",\n            className,\n         )}\n         ref={ref}\n      />\n   )\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}