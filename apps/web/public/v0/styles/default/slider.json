{
  "$schema": "https://nyxbui.design/schema/registry-item.json",
  "name": "slider",
  "type": "registry:ui",
  "author": "nyxb (https://nyxbui.design)",
  "dependencies": [
    "@radix-ui/react-slider"
  ],
  "files": [
    {
      "path": "ui/slider.tsx",
      "content": "\"use client\"\n\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface SliderProps\n   extends React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root> {\n   showSteps?: \"none\" | \"half\" | \"full\"\n   formatLabel?: (value: number) => string\n   formatLabelSide?: string\n}\n\nconst Slider = React.forwardRef<\n   React.ElementRef<typeof SliderPrimitive.Root>,\n   SliderProps\n>(\n   (\n      {\n         className,\n         showSteps = \"none\",\n         formatLabel,\n         formatLabelSide = \"top\",\n         ...props\n      },\n      ref,\n   ) => {\n      const {\n         min = 0,\n         max = 100,\n         step = 1,\n         orientation = \"horizontal\",\n         value,\n         defaultValue,\n         onValueChange,\n      } = props\n      const [hoveredThumbIndex, setHoveredThumbIndex] =\n         React.useState<boolean>(false)\n      const numberOfSteps = Math.floor((max - min) / step)\n      const stepLines = Array.from(\n         { length: numberOfSteps },\n         (_, index) => index * step + min,\n      )\n\n      const initialValue = Array.isArray(value)\n         ? value\n         : Array.isArray(defaultValue)\n           ? defaultValue\n           : [min, max]\n      const [localValues, setLocalValues] =\n         React.useState<number[]>(initialValue)\n\n      React.useEffect(() => {\n         if (!isEqual(value, localValues))\n            setLocalValues(\n               Array.isArray(value)\n                  ? value\n                  : Array.isArray(defaultValue)\n                    ? defaultValue\n                    : [min, max],\n            )\n      }, [min, max, value])\n\n      const handleValueChange = (newValues: number[]) => {\n         setLocalValues(newValues)\n         if (onValueChange) onValueChange(newValues)\n      }\n\n      function isEqual(\n         array1: number[] | undefined,\n         array2: number[] | undefined,\n      ) {\n         array1 = array1 ?? []\n         array2 = array2 ?? []\n\n         if (array1.length !== array2.length) return false\n\n         for (let i = 0; i < array1.length; i++) {\n            if (array1[i] !== array2[i]) return false\n         }\n\n         return true\n      }\n\n      return (\n         <SliderPrimitive.Root\n            ref={ref}\n            className={cn(\n               \"relative flex cursor-pointer touch-none select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n               orientation === \"horizontal\"\n                  ? \"w-full items-center\"\n                  : \"h-full justify-center\",\n               className,\n            )}\n            min={min}\n            max={max}\n            step={step}\n            value={localValues}\n            onValueChange={(value) => handleValueChange(value)}\n            {...props}\n            onFocus={() => setHoveredThumbIndex(true)}\n            onBlur={() => setHoveredThumbIndex(false)}\n         >\n            <SliderPrimitive.Track\n               className={cn(\n                  \"bg-primary/20 relative grow overflow-hidden rounded-full\",\n                  orientation === \"horizontal\"\n                     ? \"h-1.5 w-full\"\n                     : \"h-full w-1.5\",\n               )}\n            >\n               <SliderPrimitive.Range\n                  className={cn(\n                     \"bg-primary absolute\",\n                     orientation === \"horizontal\" ? \"h-full\" : \"w-full\",\n                  )}\n               />\n               {showSteps !== undefined &&\n                  showSteps !== \"none\" &&\n                  stepLines.map((value, index) => {\n                     if (value === min || value === max) return null\n\n                     const positionPercentage =\n                        ((value - min) / (max - min)) * 100\n                     const adjustedPosition =\n                        50 + (positionPercentage - 50) * 0.96\n                     return (\n                        <div\n                           key={index}\n                           className={cn(\n                              {\n                                 \"w-0.5 h-2\": orientation !== \"vertical\",\n                                 \"w-2 h-0.5\": orientation === \"vertical\",\n                              },\n                              \"bg-muted-foreground absolute\",\n                              {\n                                 \"left-1\":\n                                    orientation === \"vertical\" &&\n                                    showSteps === \"half\",\n                                 \"top-1\":\n                                    orientation !== \"vertical\" &&\n                                    showSteps === \"half\",\n                                 \"left-0\":\n                                    orientation === \"vertical\" &&\n                                    showSteps === \"full\",\n                                 \"top-0\":\n                                    orientation !== \"vertical\" &&\n                                    showSteps === \"full\",\n                                 \"-translate-x-1/2\": orientation !== \"vertical\",\n                                 \"-translate-y-1/2\": orientation === \"vertical\",\n                              },\n                           )}\n                           style={{\n                              [orientation === \"vertical\" ? \"bottom\" : \"left\"]:\n                                 `${adjustedPosition}%`,\n                           }}\n                        />\n                     )\n                  })}\n            </SliderPrimitive.Track>\n            {localValues.map((numberStep, index) => (\n               <SliderPrimitive.Thumb\n                  key={index}\n                  className={cn(\n                     \"border-primary/50 bg-background focus-visible:ring-ring block size-4 rounded-full border shadow transition-colors focus-visible:outline-none focus-visible:ring-1\",\n                  )}\n               >\n                  {hoveredThumbIndex && formatLabel && (\n                     <div\n                        className={cn(\n                           {\n                              \"bottom-8 left-1/2 -translate-x-1/2\":\n                                 formatLabelSide === \"top\",\n                           },\n                           {\n                              \"top-8 left-1/2 -translate-x-1/2\":\n                                 formatLabelSide === \"bottom\",\n                           },\n                           {\n                              \"right-8 -translate-y-1/4\":\n                                 formatLabelSide === \"left\",\n                           },\n                           {\n                              \"left-8 -translate-y-1/4\":\n                                 formatLabelSide === \"right\",\n                           },\n                           \"bg-popover text-popover-foreground absolute z-30 w-max items-center justify-items-center rounded-md border px-2 py-1 text-center shadow-sm\",\n                        )}\n                     >\n                        {formatLabel(numberStep)}\n                     </div>\n                  )}\n               </SliderPrimitive.Thumb>\n            ))}\n         </SliderPrimitive.Root>\n      )\n   },\n)\n\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}