{
  "name": "tour",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/tour.tsx",
      "content": "'use client'\nimport React, {\n   createContext,\n   useContext,\n   useEffect,\n   useMemo,\n   useRef,\n   useState,\n} from 'react'\nimport { createPortal } from 'react-dom'\n\nimport { ny } from '~/lib/utils'\n\nexport interface TourContext<T extends string> {\n   nodes: Map<\n      string,\n      {\n         ref: HTMLElement\n         render: React.ReactNode\n         name: T\n      }\n   >\n   show: boolean\n   current: number\n   next: () => void\n   previous: () => void\n   close: () => void\n   open: () => void\n}\n\nexport interface TourProps {\n   children?: React.ReactNode\n}\n\nexport interface TourFocusProps<T extends string> {\n   children: React.ReactNode\n   tourRender: React.ReactNode\n   name: T\n}\n\nexport function TourFactory<T extends string>(order: T[]) {\n   const tourContext = createContext<TourContext<T>>({\n      nodes: new Map(),\n      show: false,\n      current: 0,\n      next: () => {\n         console.log('empty')\n      },\n      previous: () => {\n         console.log('empty')\n      },\n      close: () => {\n         console.log('empty')\n      },\n      open: () => {\n         console.log('empty')\n      },\n   })\n\n   function TourPortal() {\n      const ctx = useContext(tourContext)\n\n      const ref = useRef<HTMLDivElement>(null)\n      const [, forceUpdate] = React.useState({})\n\n      const currentElement = useMemo(\n         () => ctx.nodes.get(order[ctx.current] ?? ''),\n         [ctx],\n      )\n\n      useEffect(() => {\n         const handleResize = () => {\n            forceUpdate({})\n         }\n\n         window.addEventListener('resize', handleResize)\n         window.addEventListener('scroll', handleResize)\n\n         return () => {\n            window.removeEventListener('resize', handleResize)\n            window.removeEventListener('scroll', handleResize)\n         }\n      }, [])\n\n      useEffect(() => {\n         if (ctx.show) {\n            forceUpdate({})\n         }\n      }, [ctx.show])\n\n      if (!currentElement) {\n         return <></>\n      }\n\n      const currentElementRect = currentElement.ref.getBoundingClientRect()\n\n      const height = ref.current?.getBoundingClientRect().height ?? 0\n      const width = ref.current?.getBoundingClientRect().width ?? 0\n\n      const closest = (): React.CSSProperties => {\n         const isCloseToTop = currentElementRect.top < height\n         const isCloseToLeft = currentElementRect.left < width\n         const isCloseToRight\n         = currentElementRect.right > window.innerWidth - width\n\n         if (isCloseToLeft) {\n            return {\n               left: currentElementRect.x + currentElementRect.width,\n               top:\n             currentElementRect.y - height / 2 + currentElementRect.height / 2,\n            }\n         }\n\n         if (isCloseToRight) {\n            return {\n               left: currentElementRect.x - width,\n               top:\n             currentElementRect.y - height / 2 + currentElementRect.height / 2,\n            }\n         }\n\n         if (isCloseToTop) {\n            return {\n               left: currentElementRect.x - width / 2 + currentElementRect.width / 2,\n               top: currentElementRect.y + currentElementRect.height,\n            }\n         }\n\n         return {\n            left: currentElementRect.x - width / 2 + currentElementRect.width / 2,\n            top: currentElementRect.y - height,\n         }\n      }\n\n      return createPortal(\n         <div\n            id=\"tour\"\n            className={ny(\n               'pointer-events-auto fixed left-0 top-0 h-screen w-screen transition-none',\n               !ctx.show ? 'invisible' : 'visible',\n            )}\n         >\n            <div\n               ref={ref}\n               className={ny(\n             `absolute z-50 transition-all duration-500 ease-in-out`,\n               )}\n               style={{\n                  ...closest(),\n               }}\n            >\n               {currentElement.render}\n            </div>\n            <div\n               className=\"absolute z-40 h-screen w-screen overflow-hidden opacity-80 shadow-[0_0_0_100vw_rgba(0,0,0,.99)] transition-all duration-500 ease-in-out\"\n               style={{\n                  height: currentElementRect.height,\n                  width: currentElementRect.width,\n                  left: currentElementRect.x,\n                  top: currentElementRect.y,\n               }}\n            />\n         </div>,\n         document.body,\n      )\n   }\n\n   return {\n      TourProvider: function TourProvider(props: TourProps) {\n         const nodes = useRef<TourContext<T>['nodes']>(new Map())\n\n         const [show, setShow] = useState(false)\n         const [current, setCurrent] = useState(0)\n\n         const getNextIndex = (currIndex: number, nextDiff: number): number => {\n            const lookAheadIndex = currIndex + nextDiff\n            if (lookAheadIndex >= order.length || lookAheadIndex < 0) {\n               return currIndex\n            }\n            if (!nodes.current.has(order[lookAheadIndex])) {\n               return getNextIndex(lookAheadIndex, nextDiff)\n            }\n            return lookAheadIndex\n         }\n\n         return (\n            <tourContext.Provider\n               value={{\n                  nodes: nodes.current,\n                  current,\n                  show,\n                  next: () => {\n                     setCurrent(state =>\n                        Math.min(getNextIndex(state, 1), order.length - 1),\n                     )\n                  },\n                  previous: () => {\n                     setCurrent(state => Math.max(getNextIndex(state, -1), 0))\n                  },\n                  close: () => {\n                     setShow(false)\n                  },\n                  open: () => {\n                     setShow(true)\n                  },\n               }}\n            >\n               <TourPortal />\n               {props.children}\n            </tourContext.Provider>\n         )\n      },\n      context: tourContext,\n      useContext: () => useContext(tourContext),\n      TourFocus: function TourFocus(props: TourFocusProps<T>) {\n         const ctx = useContext(tourContext)\n         return (\n            <div\n               ref={(divRef) => {\n                  if (divRef && !ctx.nodes.has(props.name)) {\n                     ctx.nodes.set(props.name, {\n                        ref: divRef,\n                        render: props.tourRender,\n                        name: props.name,\n                     })\n                  }\n               }}\n            >\n               {props.children}\n            </div>\n         )\n      },\n   }\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}