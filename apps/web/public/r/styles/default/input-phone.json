{
  "name": "input-phone",
  "type": "registry:ui",
  "dependencies": [
    "react-phone-number-input",
    "@radix-ui/react-icons"
  ],
  "registryDependencies": [
    "button",
    "input",
    "popover",
    "command"
  ],
  "files": [
    {
      "path": "ui/input-phone.tsx",
      "content": "import * as React from 'react'\nimport { CaretSortIcon, CheckIcon } from '@radix-ui/react-icons'\nimport * as RPNInput from 'react-phone-number-input'\nimport flags from 'react-phone-number-input/flags'\n\nimport { ny } from '~/lib/utils'\nimport { Button } from '~/registry/miami/ui/button'\nimport {\n   Command,\n   CommandEmpty,\n   CommandGroup,\n   CommandInput,\n   CommandItem,\n   CommandList,\n} from '~/registry/miami/ui/command'\nimport type { InputProps } from '~/registry/miami/ui/input'\nimport { Input } from '~/registry/miami/ui/input'\nimport {\n   Popover,\n   PopoverContent,\n   PopoverTrigger,\n} from '~/registry/miami/ui/popover'\n\ntype InputPhoneProps = Omit<\n   React.InputHTMLAttributes<HTMLInputElement>,\n  'onChange' | 'value'\n> &\nOmit<RPNInput.Props<typeof RPNInput.default>, 'onChange'> & {\n   onChange?: (value: RPNInput.Value) => void\n}\n\nconst InputPhone: React.ForwardRefExoticComponent<InputPhoneProps>\n  = React.forwardRef<React.ElementRef<typeof RPNInput.default>, InputPhoneProps>(\n     ({ className, onChange, ...props }, ref) => (\n        <RPNInput.default\n           ref={ref}\n           className={ny('flex', className)}\n           flagComponent={FlagComponent}\n           countrySelectComponent={CountrySelect}\n           inputComponent={InputComponent}\n           /**\n            * Handles the onChange event.\n            *\n            * react-phone-number-input might trigger the onChange event as undefined\n            * when a valid phone number is not entered. To prevent this,\n            * the value is coerced to an empty string.\n            *\n            * @param {E164Number | undefined} value - The entered value\n            */\n           onChange={value => onChange?.(value as RPNInput.Value)}\n           {...props}\n        />\n     ),\n  )\nInputPhone.displayName = 'InputPhone'\n\nconst InputComponent = React.forwardRef<HTMLInputElement, InputProps>(\n   ({ className, ...props }, ref) => (\n      <Input\n         className={ny('rounded-e-lg rounded-s-none', className)}\n         {...props}\n         ref={ref}\n      />\n   ),\n)\nInputComponent.displayName = 'InputComponent'\n\ninterface CountrySelectOption { label: string, value: RPNInput.Country }\n\ninterface CountrySelectProps {\n   disabled?: boolean\n   value: RPNInput.Country\n   onChange: (value: RPNInput.Country) => void\n   options: CountrySelectOption[]\n}\n\nfunction CountrySelect({\n   disabled,\n   value,\n   onChange,\n   options,\n}: CountrySelectProps) {\n   const handleSelect = React.useCallback(\n      (country: RPNInput.Country) => onChange(country),\n      [onChange],\n   )\n\n   return (\n      <Popover>\n         <PopoverTrigger asChild>\n            <Button\n               type=\"button\"\n               variant=\"outline\"\n               className={ny('flex gap-1 rounded-e-none rounded-s-lg px-3')}\n               disabled={disabled}\n            >\n               <FlagComponent country={value} countryName={value} />\n               <CaretSortIcon\n                  className={ny(\n                     '-mr-2 size-4 opacity-50',\n                     disabled ? 'hidden' : 'opacity-100',\n                  )}\n               />\n            </Button>\n         </PopoverTrigger>\n         <PopoverContent className=\"w-[300px] p-0\">\n            <Command>\n               <CommandList>\n                  <CommandInput placeholder=\"Search country...\" />\n                  <CommandEmpty>No country found.</CommandEmpty>\n                  <CommandGroup>\n                     {options.map(option => (\n                        <CommandItem\n                           className=\"gap-2\"\n                           key={option.value || 'ZZ'}\n                           onSelect={() => handleSelect(option.value)}\n                        >\n                           <FlagComponent\n                              country={option.value}\n                              countryName={option.label}\n                           />\n                           <span className=\"flex-1 text-sm\">{option.label}</span>\n                           {option.value && (\n                              <span className=\"text-foreground/50 text-sm\">\n                                 {`+${RPNInput.getCountryCallingCode(option.value)}`}\n                              </span>\n                           )}\n                           <CheckIcon\n                              className={ny(\n                                 'ml-auto size-4',\n                                 option.value === value ? 'opacity-100' : 'opacity-0',\n                              )}\n                           />\n                        </CommandItem>\n                     ))}\n                  </CommandGroup>\n               </CommandList>\n            </Command>\n         </PopoverContent>\n      </Popover>\n   )\n}\n\nfunction FlagComponent({ country, countryName }: RPNInput.FlagProps) {\n   const Flag = flags[country]\n\n   return (\n      <span className=\"bg-foreground/20 flex h-4 w-6 overflow-hidden rounded-sm\">\n         {Flag && <Flag title={countryName} />}\n      </span>\n   )\n}\nFlagComponent.displayName = 'FlagComponent'\n\nexport { InputPhone }\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
