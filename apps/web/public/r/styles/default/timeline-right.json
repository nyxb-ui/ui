{
  "name": "timeline-right",
  "type": "registry:example",
  "registryDependencies": [
    "timeline"
  ],
  "files": [
    {
      "path": "example/timeline-right.tsx",
      "content": "import React from 'react'\n\nimport {\n   Timeline,\n   TimelineContent,\n   TimelineDot,\n   TimelineHeading,\n   TimelineItem,\n   TimelineLine,\n} from '~/registry/default/ui/timeline'\n\nexport default function TimelineRight() {\n   return (\n      <Timeline positions=\"right\">\n         <TimelineItem status=\"done\">\n            <TimelineHeading side=\"left\">Plan!</TimelineHeading>\n            <TimelineDot status=\"done\" />\n            <TimelineLine done />\n            <TimelineContent side=\"left\">\n               Before diving into coding, it is crucial to plan your software project\n               thoroughly. This involves defining the project scope, setting clear\n               objectives, and identifying the target audience. Additionally,\n               creating a timeline and allocating resources appropriately will\n               contribute to a successful development process.\n            </TimelineContent>\n         </TimelineItem>\n         <TimelineItem status=\"done\">\n            <TimelineHeading side=\"left\" className=\"text-destructive\">\n               Design\n            </TimelineHeading>\n            <TimelineDot status=\"error\" />\n            <TimelineLine done />\n            <TimelineContent side=\"left\">\n               Designing your software involves creating a blueprint that outlines\n               the structure, user interface, and functionality of your application.\n               Consider user experience (UX) principles, wireframing, and prototyping\n               to ensure an intuitive and visually appealing design.\n            </TimelineContent>\n         </TimelineItem>\n         <TimelineItem status=\"done\">\n            <TimelineHeading side=\"left\">Code</TimelineHeading>\n            <TimelineDot status=\"current\" />\n            <TimelineLine />\n            <TimelineContent side=\"left\">\n               The coding phase involves translating your design into actual code.\n               Choose a programming language and framework that aligns with your\n               project requirements. Follow best practices, such as modular and\n               reusable code, to enhance maintainability and scalability. Regularly\n               test your code to identify and fix any bugs or errors.\n            </TimelineContent>\n         </TimelineItem>\n         <TimelineItem>\n            <TimelineHeading side=\"left\">Test</TimelineHeading>\n            <TimelineDot />\n            <TimelineLine />\n            <TimelineContent side=\"left\">\n               Thorough testing is essential to ensure the quality and reliability of\n               your software. Implement different testing methodologies, including\n               unit testing, integration testing, and user acceptance testing. This\n               helps identify and rectify any issues before deploying the software.\n            </TimelineContent>\n         </TimelineItem>\n         <TimelineItem>\n            <TimelineHeading side=\"left\">Deploy</TimelineHeading>\n            <TimelineDot />\n            <TimelineLine />\n            <TimelineContent side=\"left\">\n               Once your software has passed rigorous testing, it's time to deploy\n               it. Consider the deployment environment, whether it's on-premises or\n               in the cloud. Ensure proper documentation and provide clear\n               instructions for installation and configuration.\n            </TimelineContent>\n         </TimelineItem>\n         <TimelineItem>\n            <TimelineDot />\n            <TimelineHeading side=\"left\">Done!</TimelineHeading>\n         </TimelineItem>\n      </Timeline>\n   )\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
