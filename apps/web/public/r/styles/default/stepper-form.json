{
  "$schema": "https://nyxbui.design/schema/registry-item.json",
  "name": "stepper-form",
  "type": "registry:example",
  "author": "nyxbui (https://nyxbui.design)",
  "registryDependencies": [
    "stepper"
  ],
  "files": [
    {
      "path": "examples/stepper-form.tsx",
      "content": "\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n\nimport { Button } from \"~/registry/default/ui/button\"\nimport {\n   Form,\n   FormControl,\n   FormDescription,\n   FormField,\n   FormItem,\n   FormLabel,\n   FormMessage,\n} from \"~/registry/default/ui/form\"\nimport { Input } from \"~/registry/default/ui/input\"\nimport { Step, Stepper, useStepper } from \"~/registry/default/ui/stepper\"\nimport { toast } from \"~/registry/default/ui/use-toast\"\n\nconst steps = [\n   { label: \"Step 1\", description: \"Description 1\" },\n   { label: \"Step 2\", description: \"Description 2\" },\n]\n\nexport default function StepperDemo() {\n   return (\n      <div className=\"flex w-full flex-col gap-4\">\n         <Stepper variant=\"circle-alt\" initialStep={0} steps={steps}>\n            {steps.map((stepProps, index) => {\n               if (index === 0) {\n                  return (\n                     <Step key={stepProps.label} {...stepProps}>\n                        <FirstStepForm />\n                     </Step>\n                  )\n               }\n               return (\n                  <Step key={stepProps.label} {...stepProps}>\n                     <SecondStepForm />\n                  </Step>\n               )\n            })}\n            <MyStepperFooter />\n         </Stepper>\n      </div>\n   )\n}\n\nconst FirstFormSchema = z.object({\n   username: z.string().min(2, {\n      message: \"Username must be at least 2 characters.\",\n   }),\n})\n\nfunction FirstStepForm() {\n   const { nextStep } = useStepper()\n\n   const form = useForm<z.infer<typeof FirstFormSchema>>({\n      resolver: zodResolver(FirstFormSchema),\n      defaultValues: {\n         username: \"\",\n      },\n   })\n\n   function onSubmit(data: z.infer<typeof FirstFormSchema>) {\n      nextStep()\n      toast({\n         title: \"First step submitted!\",\n      })\n   }\n\n   return (\n      <Form {...form}>\n         <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n               control={form.control}\n               name=\"username\"\n               render={({ field }) => (\n                  <FormItem>\n                     <FormLabel>Username</FormLabel>\n                     <FormControl>\n                        <Input placeholder=\"nyxb\" {...field} />\n                     </FormControl>\n                     <FormDescription>\n                        This is your public display name.\n                     </FormDescription>\n                     <FormMessage />\n                  </FormItem>\n               )}\n            />\n            <StepperFormActions />\n         </form>\n      </Form>\n   )\n}\n\nconst SecondFormSchema = z.object({\n   password: z.string().min(8, {\n      message: \"Password must be at least 8 characters.\",\n   }),\n})\n\nfunction SecondStepForm() {\n   const { nextStep } = useStepper()\n\n   const form = useForm<z.infer<typeof SecondFormSchema>>({\n      resolver: zodResolver(SecondFormSchema),\n      defaultValues: {\n         password: \"\",\n      },\n   })\n\n   function onSubmit(data: z.infer<typeof SecondFormSchema>) {\n      nextStep()\n      toast({\n         title: \"Second step submitted!\",\n      })\n   }\n\n   return (\n      <Form {...form}>\n         <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n               control={form.control}\n               name=\"password\"\n               render={({ field }) => (\n                  <FormItem>\n                     <FormLabel>Password</FormLabel>\n                     <FormControl>\n                        <Input type=\"password\" {...field} />\n                     </FormControl>\n                     <FormDescription>\n                        This is your private password.\n                     </FormDescription>\n                     <FormMessage />\n                  </FormItem>\n               )}\n            />\n            <StepperFormActions />\n         </form>\n      </Form>\n   )\n}\n\nfunction StepperFormActions() {\n   const {\n      prevStep,\n      resetSteps,\n      isDisabledStep,\n      hasCompletedAllSteps,\n      isLastStep,\n      isOptionalStep,\n   } = useStepper()\n\n   return (\n      <div className=\"flex w-full justify-end gap-2\">\n         {hasCompletedAllSteps ? (\n            <Button size=\"sm\" onClick={resetSteps}>\n               Reset\n            </Button>\n         ) : (\n            <>\n               <Button\n                  disabled={isDisabledStep}\n                  onClick={prevStep}\n                  size=\"sm\"\n                  variant=\"secondary\"\n               >\n                  Prev\n               </Button>\n               <Button size=\"sm\">\n                  {isLastStep ? \"Finish\" : isOptionalStep ? \"Skip\" : \"Next\"}\n               </Button>\n            </>\n         )}\n      </div>\n   )\n}\n\nfunction MyStepperFooter() {\n   const { activeStep, resetSteps, steps } = useStepper()\n\n   if (activeStep !== steps.length) return null\n\n   return (\n      <div className=\"flex items-center justify-end gap-2\">\n         <Button onClick={resetSteps}>Reset Stepper with Form</Button>\n      </div>\n   )\n}\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}