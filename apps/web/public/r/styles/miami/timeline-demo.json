{
  "$schema": "https://nyxbui.design/schema/registry-item.json",
  "name": "timeline-demo",
  "type": "registry:example",
  "author": "nyxbui (https://nyxbui.design)",
  "registryDependencies": [
    "timeline"
  ],
  "files": [
    {
      "path": "examples/timeline-demo.tsx",
      "content": "import React from \"react\"\n\nimport {\n   Timeline,\n   TimelineContent,\n   TimelineDot,\n   TimelineHeading,\n   TimelineItem,\n   TimelineLine,\n} from \"~/registry/miami/ui/timeline\"\n\nexport default function TimelineDemo() {\n   return (\n      <Timeline>\n         <TimelineItem status=\"done\">\n            <TimelineHeading>Plan!</TimelineHeading>\n            <TimelineDot status=\"done\" />\n            <TimelineLine done />\n            <TimelineContent>\n               Before diving into coding, it is crucial to plan your software\n               project thoroughly. This involves defining the project scope,\n               setting clear objectives, and identifying the target audience.\n               Additionally, creating a timeline and allocating resources\n               appropriately will contribute to a successful development\n               process.\n            </TimelineContent>\n         </TimelineItem>\n         <TimelineItem status=\"done\">\n            <TimelineHeading side=\"right\" className=\"text-destructive\">\n               Design\n            </TimelineHeading>\n            <TimelineDot status=\"error\" />\n            <TimelineLine done />\n            <TimelineContent>\n               Designing your software involves creating a blueprint that\n               outlines the structure, user interface, and functionality of your\n               application. Consider user experience (UX) principles,\n               wireframing, and prototyping to ensure an intuitive and visually\n               appealing design.\n            </TimelineContent>\n         </TimelineItem>\n         <TimelineItem status=\"done\">\n            <TimelineHeading>Code</TimelineHeading>\n            <TimelineDot status=\"current\" />\n            <TimelineLine />\n            <TimelineContent>\n               The coding phase involves translating your design into actual\n               code. Choose a programming language and framework that aligns\n               with your project requirements. Follow best practices, such as\n               modular and reusable code, to enhance maintainability and\n               scalability. Regularly test your code to identify and fix any\n               bugs or errors.\n            </TimelineContent>\n         </TimelineItem>\n         <TimelineItem>\n            <TimelineHeading>Test</TimelineHeading>\n            <TimelineDot />\n            <TimelineLine />\n            <TimelineContent>\n               Thorough testing is essential to ensure the quality and\n               reliability of your software. Implement different testing\n               methodologies, including unit testing, integration testing, and\n               user acceptance testing. This helps identify and rectify any\n               issues before deploying the software.\n            </TimelineContent>\n         </TimelineItem>\n         <TimelineItem>\n            <TimelineHeading>Deploy</TimelineHeading>\n            <TimelineDot />\n            <TimelineLine />\n            <TimelineContent>\n               Once your software has passed rigorous testing, it's time to\n               deploy it. Consider the deployment environment, whether it's\n               on-premises or in the cloud. Ensure proper documentation and\n               provide clear instructions for installation and configuration.\n            </TimelineContent>\n         </TimelineItem>\n         <TimelineItem>\n            <TimelineHeading>Done!</TimelineHeading>\n            <TimelineDot />\n         </TimelineItem>\n      </Timeline>\n   )\n}\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}