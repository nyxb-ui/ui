{
  "name": "multi-select-form",
  "type": "registry:example",
  "registryDependencies": [
    "multi-select"
  ],
  "files": [
    {
      "path": "example/multi-select-form.tsx",
      "content": "'use client'\n\nimport { useRef, useState } from 'react'\nimport Link from 'next/link'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { useForm } from 'react-hook-form'\nimport { z } from 'zod'\n\nimport { Button } from '~/registry/miami/ui/button'\nimport {\n   Form,\n   FormControl,\n   FormDescription,\n   FormField,\n   FormItem,\n   FormLabel,\n   FormMessage,\n} from '~/registry/default/ui/form'\nimport {\n   MultiSelect,\n   MultiSelectContent,\n   MultiSelectEmpty,\n   MultiSelectList,\n   type MultiSelectOption,\n   type MultiSelectOptionGroup,\n   MultiSelectSearch,\n   MultiSelectTrigger,\n   MultiSelectValue,\n   renderMultiSelectOptions,\n} from '~/registry/default/ui/multi-select'\nimport { toast } from '~/registry/default/ui/use-toast'\n\nconst ALL_ITEMS = [\n   { value: 'react', label: 'React', group: 'React' },\n   { value: 'next', label: 'Next.js', group: 'React' },\n   { value: 'remix', label: 'Remix', group: 'React' },\n   { value: 'vue', label: 'Vue', group: 'Vue' },\n   { value: 'nuxt', label: 'Nuxt.js', group: 'Vue' },\n   { value: 'angular', label: 'Angular', group: 'Others' },\n   { value: 'svelte', label: 'Svelte', group: 'Others' },\n]\n\nfunction group(options: Array<(typeof ALL_ITEMS)[number]>): MultiSelectOptionGroup[] {\n   return options.reduce((acc, item) => {\n      const group = acc.find(g => g.heading === item.group)\n      if (group)\n         group.children.push(item)\n      else\n         acc.push({ heading: item.group, children: [item] })\n\n      return acc\n   }, [] as MultiSelectOptionGroup[])\n}\n\nasync function search(keyword?: string) {\n   if (!keyword)\n      return group(ALL_ITEMS)\n   const lowerKeyword = keyword.toLowerCase()\n   const filtered = ALL_ITEMS.filter(item =>\n      item.label.toLowerCase().includes(lowerKeyword),\n   )\n\n   if (!filtered.length) {\n      return [\n         {\n            label: keyword,\n            value: keyword,\n         },\n      ]\n   }\n\n   return group(filtered)\n}\n\nconst FormSchema = z.object({\n   frameworks: z.array(z.string(), {\n      required_error: 'Please select at least one framework.',\n   }),\n})\n\nexport default function MultiSelectFormDemo() {\n   const form = useForm<z.infer<typeof FormSchema>>({\n      resolver: zodResolver(FormSchema),\n   })\n\n   const [loading, setLoading] = useState(false)\n   const [options, setOptions] = useState<MultiSelectOption[]>(() =>\n      group(ALL_ITEMS),\n   )\n\n   const indexRef = useRef(0)\n\n   const handleSearch = async (keyword: string) => {\n      const index = ++indexRef.current\n      setLoading(true)\n      const newOptions = await search(keyword)\n      if (indexRef.current === index) {\n         setOptions(newOptions)\n         setLoading(false)\n      }\n   }\n\n   const onSubmit = (data: z.infer<typeof FormSchema>) => {\n      toast({\n         title: 'You submitted the following values:',\n         description: (\n            <pre className=\"mt-2 w-[340px] rounded-md bg-slate-950 p-4\">\n               <code className=\"text-white\">{JSON.stringify(data, null, 2)}</code>\n            </pre>\n         ),\n      })\n   }\n\n   return (\n      <Form {...form}>\n         <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\n            <FormField\n               control={form.control}\n               name=\"frameworks\"\n               render={({ field }) => (\n                  <FormItem>\n                     <FormLabel>Frameworks</FormLabel>\n                     <MultiSelect\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                        onSearch={keyword => handleSearch(keyword ?? '')}\n                     >\n                        <FormControl>\n                           <MultiSelectTrigger className=\"w-96\">\n                              <MultiSelectValue placeholder=\"Select frameworks\" />\n                           </MultiSelectTrigger>\n                        </FormControl>\n                        <MultiSelectContent>\n                           <MultiSelectSearch />\n                           <MultiSelectList>\n                              {loading ? null : renderMultiSelectOptions(options)}\n                              <MultiSelectEmpty>\n                                 {loading ? 'Loading...' : 'No results found'}\n                              </MultiSelectEmpty>\n                           </MultiSelectList>\n                        </MultiSelectContent>\n                     </MultiSelect>\n                     <FormDescription>\n                        You can manage frameworks in\n                        {' '}\n                        <Link href=\"/examples/forms\">framework settings</Link>\n                        .\n                     </FormDescription>\n                     <FormMessage />\n                  </FormItem>\n               )}\n            />\n            <Button type=\"submit\">Submit</Button>\n         </form>\n      </Form>\n   )\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
