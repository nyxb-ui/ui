{
  "$schema": "https://nyxbui.design/schema/registry-item.json",
  "name": "nyx-toc",
  "type": "registry:ui",
  "author": "nyxbui (https://nyxbui.design)",
  "dependencies": [
    "@radix-ui/react-icons",
    "@radix-ui/react-popover",
    "@radix-ui/react-scroll-area",
    "scroll-into-view-if-needed"
  ],
  "registryDependencies": [
    "popover"
  ],
  "files": [
    {
      "path": "ui/nyx-toc.tsx",
      "content": "\"use client\"\n\nimport type {\n   PopoverContentProps,\n   PopoverTriggerProps,\n} from \"@radix-ui/react-popover\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\nimport { AlignLeft, ChevronRight } from \"lucide-react\"\nimport * as React from \"react\"\nimport type {\n   AnchorHTMLAttributes,\n   HTMLAttributes,\n   ReactNode,\n   RefObject,\n} from \"react\"\nimport {\n   createContext,\n   forwardRef,\n   useContext,\n   useEffect,\n   useMemo,\n   useRef,\n   useState,\n} from \"react\"\nimport scrollIntoView from \"scroll-into-view-if-needed\"\nimport { useAnchorObserver } from \"~/hooks/use-anchor-observer\"\nimport { useOnChange } from \"~/hooks/use-on-change\"\nimport { ny } from \"~/lib/utils\"\nimport {\n   Popover,\n   PopoverContent,\n   PopoverTrigger,\n} from \"~/registry/miami/ui/popover\"\n\n// #region Types\nexport interface TOCItemType {\n   title: ReactNode\n   url: string\n   depth: number\n}\n\nexport type TableOfContents = TOCItemType[]\nexport type TOCThumb = [top: number, height: number]\n\nexport interface TOCProps {\n   header?: ReactNode\n   footer?: ReactNode\n   children: ReactNode\n}\n\nexport interface PageStyles {\n   tocNav?: string\n   toc?: string\n   page?: string\n   article?: string\n}\n\nexport interface TOCItemProps\n   extends Omit<AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n   href: string\n\n   onActiveChange?: (v: boolean) => void\n}\n\n// #region Components\nconst ScrollArea = React.forwardRef<\n   React.ComponentRef<typeof ScrollAreaPrimitive.Root>,\n   React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n   <ScrollAreaPrimitive.Root\n      ref={ref}\n      className={ny(\"overflow-hidden\", className)}\n      {...props}\n   >\n      {children}\n      <ScrollAreaPrimitive.Corner />\n      <ScrollBar orientation=\"vertical\" />\n   </ScrollAreaPrimitive.Root>\n))\n\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollViewport = React.forwardRef<\n   React.ComponentRef<typeof ScrollAreaPrimitive.Viewport>,\n   React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Viewport>\n>(({ className, children, ...props }, ref) => (\n   <ScrollAreaPrimitive.Viewport\n      ref={ref}\n      className={ny(\"size-full rounded-[inherit]\", className)}\n      {...props}\n   >\n      {children}\n   </ScrollAreaPrimitive.Viewport>\n))\n\nScrollViewport.displayName = ScrollAreaPrimitive.Viewport.displayName\n\nconst ScrollBar = React.forwardRef<\n   React.ComponentRef<typeof ScrollAreaPrimitive.Scrollbar>,\n   React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Scrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n   <ScrollAreaPrimitive.Scrollbar\n      ref={ref}\n      orientation={orientation}\n      className={ny(\n         \"data-[state=hidden]:animate-fd-fade-out flex select-none\",\n         orientation === \"vertical\" && \"h-full w-1.5\",\n         orientation === \"horizontal\" && \"h-1.5 flex-col\",\n         className,\n      )}\n      {...props}\n   >\n      <ScrollAreaPrimitive.ScrollAreaThumb className=\"bg-fd-border relative flex-1 rounded-full\" />\n   </ScrollAreaPrimitive.Scrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.Scrollbar.displayName\n\nexport { ScrollArea, ScrollBar, ScrollViewport }\n\n// #region Contexts\nconst ActiveAnchorContext = createContext<string[]>([])\nconst ScrollContext = createContext<RefObject<HTMLElement | null>>({\n   current: null,\n})\nconst StylesContext = createContext<PageStyles>({\n   tocNav: \"xl:hidden\",\n   toc: \"max-xl:hidden\",\n})\n\n// #region Hooks\nfunction useActiveAnchor(): string | undefined {\n   return useContext(ActiveAnchorContext).at(-1)\n}\n\nfunction useActiveAnchors(): string[] {\n   return useContext(ActiveAnchorContext)\n}\n\nfunction usePageStyles() {\n   return useContext(StylesContext)\n}\n\n// #region Utility Functions\nfunction isDifferent(a: unknown, b: unknown): boolean {\n   if (Array.isArray(a) && Array.isArray(b))\n      return b.length !== a.length || a.some((v, i) => isDifferent(v, b[i]))\n   return a !== b\n}\n\nfunction mergeRefs<T>(...refs: React.Ref<T>[]): React.RefCallback<T> {\n   return (value) => {\n      refs.forEach((ref) => {\n         if (typeof ref === \"function\") ref(value)\n         else if (ref !== null && typeof ref === \"object\")\n            (ref as React.MutableRefObject<T | null>).current = value\n      })\n   }\n}\n\nfunction getItemOffset(depth: number): number {\n   if (depth <= 2) return 14\n   if (depth === 3) return 26\n   return 36\n}\n\nfunction getLineOffset(depth: number): number {\n   return depth >= 3 ? 10 : 0\n}\n\n// #region Components\nexport function ScrollProvider({\n   containerRef,\n   children,\n}: {\n   containerRef: RefObject<HTMLElement | null>\n   children?: ReactNode\n}): React.ReactElement {\n   return (\n      <ScrollContext.Provider value={containerRef}>\n         {children}\n      </ScrollContext.Provider>\n   )\n}\n\nexport function AnchorProvider({\n   toc,\n   single = true,\n   children,\n}: {\n   toc: TableOfContents\n   single?: boolean\n   children?: ReactNode\n}): React.ReactElement {\n   const headings = useMemo(() => {\n      return toc.map((item) => item.url.split(\"#\")[1])\n   }, [toc])\n\n   return (\n      <ActiveAnchorContext.Provider value={useAnchorObserver(headings, single)}>\n         {children}\n      </ActiveAnchorContext.Provider>\n   )\n}\n\nexport const TOCItem = forwardRef<HTMLAnchorElement, TOCItemProps>(\n   ({ onActiveChange, ...props }, ref) => {\n      const containerRef = useContext(ScrollContext)\n      const anchors = useActiveAnchors()\n      const anchorRef = useRef<HTMLAnchorElement>(null)\n      const mergedRef = mergeRefs(anchorRef, ref)\n\n      const isActive = anchors.includes(props.href.slice(1))\n\n      useOnChange(isActive, (v) => {\n         const element = anchorRef.current\n         if (!element) return\n\n         if (v && containerRef.current) {\n            scrollIntoView(element, {\n               behavior: \"smooth\",\n               block: \"center\",\n               inline: \"center\",\n               scrollMode: \"always\",\n               boundary: containerRef.current,\n            })\n         }\n\n         onActiveChange?.(v)\n      })\n\n      return (\n         <a ref={mergedRef} data-active={isActive} {...props}>\n            {props.children}\n         </a>\n      )\n   },\n)\n\nTOCItem.displayName = \"TOCItem\"\n\nexport function TocThumb({\n   containerRef,\n   ...props\n}: HTMLAttributes<HTMLDivElement> & {\n   containerRef: RefObject<HTMLElement | null>\n}): ReactNode {\n   const active = useActiveAnchors()\n   const thumbRef = useRef<HTMLDivElement>(null)\n   const activeRef = useRef(active)\n   activeRef.current = active\n\n   function calc(container: HTMLElement, active: string[]): TOCThumb {\n      if (active.length === 0 || container.clientHeight === 0) return [0, 0]\n\n      let upper = Number.MAX_VALUE\n      let lower = 0\n\n      for (const item of active) {\n         const element = container.querySelector<HTMLElement>(\n            `a[href=\"#${item}\"]`,\n         )\n         if (!element) continue\n\n         const styles = getComputedStyle(element)\n         upper = Math.min(\n            upper,\n            element.offsetTop + Number.parseFloat(styles.paddingTop),\n         )\n         lower = Math.max(\n            lower,\n            element.offsetTop +\n               element.clientHeight -\n               Number.parseFloat(styles.paddingBottom),\n         )\n      }\n\n      return [upper, lower - upper]\n   }\n\n   function update(element: HTMLElement, info: TOCThumb): void {\n      element.style.setProperty(\"--nyx-top\", `${info[0]}px`)\n      element.style.setProperty(\"--nyx-height\", `${info[1]}px`)\n   }\n\n   useEffect(() => {\n      if (!containerRef.current) return\n      const container = containerRef.current\n\n      const onResize = (): void => {\n         if (!thumbRef.current) return\n         update(thumbRef.current, calc(container, activeRef.current))\n      }\n\n      onResize()\n      const observer = new ResizeObserver(onResize)\n      observer.observe(container)\n\n      return () => {\n         observer.disconnect()\n      }\n   }, [containerRef])\n\n   useOnChange(active, () => {\n      if (!containerRef.current || !thumbRef.current) return\n\n      update(thumbRef.current, calc(containerRef.current, active))\n   })\n\n   return <div ref={thumbRef} role=\"none\" {...props} />\n}\n\nexport function TocItemsEmpty() {\n   return (\n      <div className=\"bg-card text-muted-foreground rounded-lg border p-3 text-xs\">\n         No headings found\n      </div>\n   )\n}\n\nexport function Toc(props: HTMLAttributes<HTMLDivElement>) {\n   const { toc } = usePageStyles()\n\n   return (\n      <div\n         id=\"nyx-toc\"\n         {...props}\n         className={ny(\n            \"top-nyx-layout-top sticky h-[var(--nyx-toc-height)] pb-2 pt-12\",\n            toc,\n            props.className,\n         )}\n         style={\n            {\n               ...props.style,\n               \"--nyx-toc-height\":\n                  \"calc(100dvh - var(--nyx-banner-height) - var(--nyx-nav-height))\",\n            } as any\n         }\n      >\n         <div className=\"flex h-full w-[var(--nyx-width)] max-w-full flex-col gap-3 pe-4\">\n            {props.children}\n         </div>\n      </div>\n   )\n}\n\n// Main Component\nexport function NyxTOCItems({\n   items,\n   isMenu = false,\n   label,\n}: {\n   items: TOCItemType[]\n   isMenu?: boolean\n   label?: ReactNode\n}) {\n   const viewRef = useRef<HTMLDivElement>(null)\n   const containerRef = useRef<HTMLDivElement>(null)\n\n   const [svg, setSvg] = useState<{\n      path: string\n      width: number\n      height: number\n   }>()\n\n   useEffect(() => {\n      if (!containerRef.current) return\n      const container = containerRef.current\n\n      function onResize(): void {\n         if (container.clientHeight === 0) return\n         let w = 0\n         let h = 0\n         const d: string[] = []\n         for (let i = 0; i < items.length; i++) {\n            const element: HTMLElement | null = container.querySelector(\n               `a[href=\"#${items[i].url.slice(1)}\"]`,\n            )\n            if (!element) continue\n\n            const styles = getComputedStyle(element)\n            const offset = getLineOffset(items[i].depth) + 1\n            const top = element.offsetTop + Number.parseFloat(styles.paddingTop)\n            const bottom =\n               element.offsetTop +\n               element.clientHeight -\n               Number.parseFloat(styles.paddingBottom)\n\n            w = Math.max(offset, w)\n            h = Math.max(h, bottom)\n\n            d.push(`${i === 0 ? \"M\" : \"L\"}${offset} ${top}`)\n            d.push(`L${offset} ${bottom}`)\n         }\n\n         setSvg({\n            path: d.join(\" \"),\n            width: w + 1,\n            height: h,\n         })\n      }\n\n      const observer = new ResizeObserver(onResize)\n      onResize()\n      observer.observe(container)\n      return () => observer.disconnect()\n   }, [items])\n\n   if (items.length === 0) return <TocItemsEmpty />\n\n   return (\n      <>\n         {label && (\n            <h3 className=\"text-muted-foreground -ms-0.5 inline-flex items-center gap-1.5 text-sm\">\n               <AlignLeft className=\"size-4\" />\n               {label}\n            </h3>\n         )}\n         <ScrollArea className={ny(\"flex flex-col\", isMenu && \"-ms-3\")}>\n            <ScrollViewport className=\"relative min-h-0\" ref={viewRef}>\n               {svg ? (\n                  <div\n                     className=\"absolute start-0 top-0 rtl:-scale-x-100\"\n                     style={{\n                        width: svg.width,\n                        height: svg.height,\n                        maskImage: `url(\"data:image/svg+xml,${\n                           // Inline SVG\n                           encodeURIComponent(\n                              `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 ${svg.width} ${svg.height}\"><path d=\"${svg.path}\" stroke=\"black\" stroke-width=\"1\" fill=\"none\" /></svg>`,\n                           )\n                        }\")`,\n                     }}\n                  >\n                     <TocThumb\n                        containerRef={containerRef}\n                        className=\"bg-primary mt-[var(--nyx-top)] h-[var(--nyx-height)] transition-all\"\n                     />\n                  </div>\n               ) : null}\n               <ScrollProvider containerRef={viewRef}>\n                  <div className=\"flex flex-col\" ref={containerRef}>\n                     {items.map((item, i) => (\n                        <LocalTOCItem\n                           key={item.url}\n                           item={item}\n                           upper={items[i - 1]?.depth}\n                           lower={items[i + 1]?.depth}\n                        />\n                     ))}\n                  </div>\n               </ScrollProvider>\n            </ScrollViewport>\n         </ScrollArea>\n      </>\n   )\n}\n\n// Popover Components\nexport const TocPopover = Popover\n\nexport function TocPopoverTrigger({\n   items,\n   ...props\n}: PopoverTriggerProps & { items: TOCItemType[] }) {\n   const active = useActiveAnchor()\n   const current = useMemo(() => {\n      return items.find((item) => active === item.url.slice(1))?.title\n   }, [items, active])\n\n   return (\n      <PopoverTrigger\n         {...props}\n         className={ny(\n            \"inline-flex items-center gap-2 text-nowrap px-4 py-2 text-start\",\n            props.className,\n         )}\n      >\n         <AlignLeft className=\"size-4 shrink-0\" />\n         Table of Contents\n         {current && (\n            <>\n               <ChevronRight className=\"text-muted-foreground -mx-1.5 size-4 shrink-0\" />\n               <span className=\"text-muted-foreground truncate\">{current}</span>\n            </>\n         )}\n      </PopoverTrigger>\n   )\n}\n\nexport function TocPopoverContent(props: PopoverContentProps) {\n   return (\n      <PopoverContent\n         hideWhenDetached\n         alignOffset={16}\n         align=\"start\"\n         side=\"bottom\"\n         data-toc-popover=\"\"\n         {...props}\n         className={ny(\n            \"flex max-h-[var(--radix-popover-content-available-height)] w-[260px] flex-col gap-4 p-3\",\n            props.className,\n         )}\n      >\n         {props.children}\n      </PopoverContent>\n   )\n}\n\nfunction LocalTOCItem({\n   item,\n   upper = item.depth,\n   lower = item.depth,\n}: {\n   item: TOCItemType\n   upper?: number\n   lower?: number\n}) {\n   const offset = getLineOffset(item.depth)\n   const upperOffset = getLineOffset(upper)\n   const lowerOffset = getLineOffset(lower)\n\n   return (\n      <TOCItem\n         href={item.url}\n         style={{\n            paddingInlineStart: getItemOffset(item.depth),\n         }}\n         className=\"prose text-muted-foreground data-[active=true]:text-primary relative py-1.5 text-sm transition-colors [overflow-wrap:anywhere] first:pt-0 last:pb-0\"\n      >\n         {offset !== upperOffset ? (\n            <svg\n               xmlns=\"http://www.w3.org/2000/svg\"\n               viewBox=\"0 0 16 16\"\n               className=\"absolute -top-1.5 start-0 size-4 rtl:-scale-x-100\"\n            >\n               <line\n                  x1={upperOffset}\n                  y1=\"0\"\n                  x2={offset}\n                  y2=\"12\"\n                  className=\"stroke-foreground/10\"\n                  strokeWidth=\"1\"\n               />\n            </svg>\n         ) : null}\n         <div\n            className={ny(\n               \"bg-foreground/10 absolute inset-y-0 w-px\",\n               offset !== upperOffset && \"top-1.5\",\n               offset !== lowerOffset && \"bottom-1.5\",\n            )}\n            style={{\n               insetInlineStart: offset,\n            }}\n         />\n         {item.title}\n      </TOCItem>\n   )\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "hooks/use-anchor-observer.ts",
      "content": "\"use client\"\n\nimport { useEffect, useState } from \"react\"\n\n/**\n * Find the active heading of page\n *\n * It selects the top heading by default, and the last item when reached the bottom of page.\n *\n * @param watch - An array of element ids to watch\n * @param single - only one active item at most\n * @returns Active anchor\n */\nexport function useAnchorObserver(watch: string[], single: boolean): string[] {\n   const [activeAnchor, setActiveAnchor] = useState<string[]>([])\n\n   useEffect(() => {\n      let visible: string[] = []\n      const observer = new IntersectionObserver(\n         (entries) => {\n            for (const entry of entries) {\n               if (entry.isIntersecting && !visible.includes(entry.target.id)) {\n                  visible = [...visible, entry.target.id]\n               } else if (\n                  !entry.isIntersecting &&\n                  visible.includes(entry.target.id)\n               ) {\n                  visible = visible.filter((v) => v !== entry.target.id)\n               }\n            }\n\n            if (visible.length > 0) setActiveAnchor(visible)\n         },\n         {\n            rootMargin: single ? \"-80px 0% -70% 0%\" : `-20px 0% -40% 0%`,\n            threshold: 1,\n         },\n      )\n\n      function onScroll(): void {\n         const element = document.scrollingElement\n         if (!element) return\n\n         if (element.scrollTop === 0 && single) {\n            setActiveAnchor(watch.slice(0, 1))\n         } else if (\n            element.scrollTop + element.clientHeight >=\n            element.scrollHeight - 6\n         ) {\n            setActiveAnchor((active) => {\n               return active.length > 0 && !single\n                  ? watch.slice(watch.indexOf(active[0]))\n                  : watch.slice(-1)\n            })\n         }\n      }\n\n      for (const heading of watch) {\n         const element = document.getElementById(heading)\n\n         if (element) observer.observe(element)\n      }\n\n      onScroll()\n      window.addEventListener(\"scroll\", onScroll)\n      return () => {\n         window.removeEventListener(\"scroll\", onScroll)\n         observer.disconnect()\n      }\n   }, [single, watch])\n\n   return single ? activeAnchor.slice(0, 1) : activeAnchor\n}\n",
      "type": "registry:hook",
      "target": ""
    },
    {
      "path": "hooks/use-on-change.ts",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\n\nfunction isDifferent(a: unknown, b: unknown): boolean {\n   if (Array.isArray(a) && Array.isArray(b)) {\n      return b.length !== a.length || a.some((v, i) => isDifferent(v, b[i]))\n   }\n\n   return a !== b\n}\n\n/**\n * @param value - state to watch\n * @param onChange - when the state changed\n * @param isUpdated - a function that determines if the state is updated\n */\nexport function useOnChange<T>(\n   value: T,\n   onChange: (current: T, previous: T) => void,\n   isUpdated: (prev: T, current: T) => boolean = isDifferent,\n): void {\n   const [prev, setPrev] = useState<T>(value)\n\n   if (isUpdated(prev, value)) {\n      onChange(value, prev)\n      setPrev(value)\n   }\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "animation": {
            "nyx-fade-out": "nyx-fade-out 0.2s ease-out"
          },
          "keyframes": {
            "nyx-fade-out": {
              "0%": {
                "opacity": "1"
              },
              "100%": {
                "opacity": "0"
              }
            }
          }
        },
        "spacing": {
          "nyx-layout-top": "calc(var(--nyx-banner-height) + var(--nyx-nav-height))"
        }
      }
    }
  }
}