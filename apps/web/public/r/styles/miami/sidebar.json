{
  "$schema": "https://nyxbui.design/schema/registry-item.json",
  "name": "sidebar",
  "type": "registry:ui",
  "author": "nyxbui (https://nyxbui.design)",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "separator",
    "sheet",
    "tooltip",
    "input",
    "use-mobile",
    "skeleton"
  ],
  "files": [
    {
      "path": "ui/sidebar.tsx",
      "content": "\"use client\"\n\nimport { Slot } from \"@radix-ui/react-slot\"\nimport type { VariantProps } from \"class-variance-authority\"\nimport { cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { useIsMobile } from \"~/registry/miami/hooks/use-mobile\"\nimport { ny } from \"~/registry/miami/lib/utils\"\nimport { Button } from \"~/registry/miami/ui/button\"\nimport { Input } from \"~/registry/miami/ui/input\"\nimport { Separator } from \"~/registry/miami/ui/separator\"\nimport { Sheet, SheetContent } from \"~/registry/miami/ui/sheet\"\nimport { Skeleton } from \"~/registry/miami/ui/skeleton\"\nimport {\n   Tooltip,\n   TooltipContent,\n   TooltipProvider,\n   TooltipTrigger,\n} from \"~/registry/miami/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ninterface SidebarContext {\n   state: \"expanded\" | \"collapsed\"\n   open: boolean\n   setOpen: (open: boolean) => void\n   openMobile: boolean\n   setOpenMobile: (open: boolean) => void\n   isMobile: boolean\n   toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n   const context = React.useContext(SidebarContext)\n   if (!context) {\n      throw new Error(\"useSidebar must be used within a Sidebar.\")\n   }\n\n   return context\n}\n\nconst SidebarProvider = React.forwardRef<\n   HTMLDivElement,\n   React.ComponentProps<\"div\"> & {\n      defaultOpen?: boolean\n      open?: boolean\n      onOpenChange?: (open: boolean) => void\n   }\n>(\n   (\n      {\n         defaultOpen = true,\n         open: openProp,\n         onOpenChange: setOpenProp,\n         className,\n         style,\n         children,\n         ...props\n      },\n      ref,\n   ) => {\n      const isMobile = useIsMobile()\n      const [openMobile, setOpenMobile] = React.useState(false)\n\n      // This is the internal state of the sidebar.\n      // We use openProp and setOpenProp for control from outside the component.\n      const [_open, _setOpen] = React.useState(defaultOpen)\n      const open = openProp ?? _open\n      const setOpen = React.useCallback(\n         (value: boolean | ((value: boolean) => boolean)) => {\n            if (setOpenProp) {\n               return setOpenProp?.(\n                  typeof value === \"function\" ? value(open) : value,\n               )\n            }\n\n            _setOpen(value)\n\n            // This sets the cookie to keep the sidebar state.\n            document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n         },\n         [setOpenProp, open],\n      )\n\n      // Helper to toggle the sidebar.\n      const toggleSidebar = React.useCallback(() => {\n         return isMobile\n            ? setOpenMobile((open) => !open)\n            : setOpen((open) => !open)\n      }, [isMobile, setOpen, setOpenMobile])\n\n      // Adds a keyboard shortcut to toggle the sidebar.\n      React.useEffect(() => {\n         const handleKeyDown = (event: KeyboardEvent) => {\n            if (\n               event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n               (event.metaKey || event.ctrlKey)\n            ) {\n               event.preventDefault()\n               toggleSidebar()\n            }\n         }\n\n         window.addEventListener(\"keydown\", handleKeyDown)\n         return () => window.removeEventListener(\"keydown\", handleKeyDown)\n      }, [toggleSidebar])\n\n      // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n      // This makes it easier to style the sidebar with Tailwind classes.\n      const state = open ? \"expanded\" : \"collapsed\"\n\n      const contextValue = React.useMemo<SidebarContext>(\n         () => ({\n            state,\n            open,\n            setOpen,\n            isMobile,\n            openMobile,\n            setOpenMobile,\n            toggleSidebar,\n         }),\n         [\n            state,\n            open,\n            setOpen,\n            isMobile,\n            openMobile,\n            setOpenMobile,\n            toggleSidebar,\n         ],\n      )\n\n      return (\n         <SidebarContext.Provider value={contextValue}>\n            <TooltipProvider delayDuration={0}>\n               <div\n                  style={\n                     {\n                        \"--sidebar-width\": SIDEBAR_WIDTH,\n                        \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                        ...style,\n                     } as React.CSSProperties\n                  }\n                  className={ny(\n                     \"group/sidebar-wrapper text-sidebar-foreground has-[[data-variant=inset]]:bg-sidebar flex min-h-svh w-full\",\n                     className,\n                  )}\n                  ref={ref}\n                  {...props}\n               >\n                  {children}\n               </div>\n            </TooltipProvider>\n         </SidebarContext.Provider>\n      )\n   },\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n   HTMLDivElement,\n   React.ComponentProps<\"div\"> & {\n      side?: \"left\" | \"right\"\n      variant?: \"sidebar\" | \"floating\" | \"inset\"\n      collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n   }\n>(\n   (\n      {\n         side = \"left\",\n         variant = \"sidebar\",\n         collapsible = \"offcanvas\",\n         className,\n         children,\n         ...props\n      },\n      ref,\n   ) => {\n      const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n      if (collapsible === \"none\") {\n         return (\n            <div\n               className={ny(\n                  \"bg-sidebar text-sidebar-foreground flex h-full w-[--sidebar-width] flex-col\",\n                  className,\n               )}\n               ref={ref}\n               {...props}\n            >\n               {children}\n            </div>\n         )\n      }\n\n      if (isMobile) {\n         return (\n            <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n               <SheetContent\n                  data-sidebar=\"sidebar\"\n                  data-mobile=\"true\"\n                  className=\"bg-sidebar text-sidebar-foreground w-[--sidebar-width] p-0 [&>button]:hidden\"\n                  style={\n                     {\n                        \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n                     } as React.CSSProperties\n                  }\n                  side={side}\n               >\n                  <div className=\"flex size-full flex-col\">{children}</div>\n               </SheetContent>\n            </Sheet>\n         )\n      }\n\n      return (\n         <div\n            ref={ref}\n            className=\"group peer hidden md:block\"\n            data-state={state}\n            data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n            data-variant={variant}\n            data-side={side}\n         >\n            {/* This is what handles the sidebar gap on desktop */}\n            <div\n               className={ny(\n                  \"relative h-svh w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n                  \"group-data-[collapsible=offcanvas]:w-0\",\n                  \"group-data-[side=right]:rotate-180\",\n                  variant === \"floating\" || variant === \"inset\"\n                     ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n                     : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\n               )}\n            />\n            <div\n               className={ny(\n                  \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n                  side === \"left\"\n                     ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n                     : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n                  // Adjust the padding for floating and inset variants.\n                  variant === \"floating\" || variant === \"inset\"\n                     ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n                     : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n                  className,\n               )}\n               {...props}\n            >\n               <div\n                  data-sidebar=\"sidebar\"\n                  className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex size-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow\"\n               >\n                  {children}\n               </div>\n            </div>\n         </div>\n      )\n   },\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n   React.ElementRef<typeof Button>,\n   React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n   const { toggleSidebar } = useSidebar()\n\n   return (\n      <Button\n         ref={ref}\n         data-sidebar=\"trigger\"\n         variant=\"ghost\"\n         size=\"icon\"\n         className={ny(\"size-7\", className)}\n         onClick={(event) => {\n            onClick?.(event)\n            toggleSidebar()\n         }}\n         {...props}\n      >\n         <PanelLeft />\n         <span className=\"sr-only\">Toggle Sidebar</span>\n      </Button>\n   )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n   HTMLButtonElement,\n   React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n   const { toggleSidebar } = useSidebar()\n\n   return (\n      <button\n         ref={ref}\n         data-sidebar=\"rail\"\n         aria-label=\"Toggle Sidebar\"\n         tabIndex={-1}\n         onClick={toggleSidebar}\n         title=\"Toggle Sidebar\"\n         className={ny(\n            \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n            \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n            \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n            \"group-data-[collapsible=offcanvas]:hover:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n            \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n            \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n            className,\n         )}\n         {...props}\n      />\n   )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n   HTMLDivElement,\n   React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n   return (\n      <main\n         ref={ref}\n         className={ny(\n            \"bg-background relative flex min-h-svh flex-1 flex-col\",\n            \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n            className,\n         )}\n         {...props}\n      />\n   )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n   React.ElementRef<typeof Input>,\n   React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n   return (\n      <Input\n         ref={ref}\n         data-sidebar=\"input\"\n         className={ny(\n            \"bg-background focus-visible:ring-sidebar-ring h-8 w-full shadow-none focus-visible:ring-2\",\n            className,\n         )}\n         {...props}\n      />\n   )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n   HTMLDivElement,\n   React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n   return (\n      <div\n         ref={ref}\n         data-sidebar=\"header\"\n         className={ny(\"flex flex-col gap-2 p-2\", className)}\n         {...props}\n      />\n   )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n   HTMLDivElement,\n   React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n   return (\n      <div\n         ref={ref}\n         data-sidebar=\"footer\"\n         className={ny(\"flex flex-col gap-2 p-2\", className)}\n         {...props}\n      />\n   )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n   React.ElementRef<typeof Separator>,\n   React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n   return (\n      <Separator\n         ref={ref}\n         data-sidebar=\"separator\"\n         className={ny(\"bg-sidebar-border mx-2 w-auto\", className)}\n         {...props}\n      />\n   )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n   HTMLDivElement,\n   React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n   return (\n      <div\n         ref={ref}\n         data-sidebar=\"content\"\n         className={ny(\n            \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n            className,\n         )}\n         {...props}\n      />\n   )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n   HTMLDivElement,\n   React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n   return (\n      <div\n         ref={ref}\n         data-sidebar=\"group\"\n         className={ny(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n         {...props}\n      />\n   )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n   HTMLDivElement,\n   React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n   const Comp = asChild ? Slot : \"div\"\n\n   return (\n      <Comp\n         ref={ref}\n         data-sidebar=\"group-label\"\n         className={ny(\n            \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-none transition-[margin,opa] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n            \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n            className,\n         )}\n         {...props}\n      />\n   )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n   HTMLButtonElement,\n   React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n   const Comp = asChild ? Slot : \"button\"\n\n   return (\n      <Comp\n         ref={ref}\n         data-sidebar=\"group-action\"\n         className={ny(\n            \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-none transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n            // Increases the hit area of the button on mobile.\n            \"after:absolute after:-inset-2 after:md:hidden\",\n            \"group-data-[collapsible=icon]:hidden\",\n            className,\n         )}\n         {...props}\n      />\n   )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n   HTMLDivElement,\n   React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n   <div\n      ref={ref}\n      data-sidebar=\"group-content\"\n      className={ny(\"w-full text-sm\", className)}\n      {...props}\n   />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n   HTMLUListElement,\n   React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n   <ul\n      ref={ref}\n      data-sidebar=\"menu\"\n      className={ny(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n   />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n   HTMLLIElement,\n   React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n   <li\n      ref={ref}\n      data-sidebar=\"menu-item\"\n      className={ny(\"group/menu-item relative\", className)}\n      {...props}\n   />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n   \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n   {\n      variants: {\n         variant: {\n            default:\n               \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n            outline:\n               \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n         },\n         size: {\n            default: \"h-8 text-sm\",\n            sm: \"h-7 text-xs\",\n            lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n         },\n      },\n      defaultVariants: {\n         variant: \"default\",\n         size: \"default\",\n      },\n   },\n)\n\nconst SidebarMenuButton = React.forwardRef<\n   HTMLButtonElement,\n   React.ComponentProps<\"button\"> & {\n      asChild?: boolean\n      isActive?: boolean\n      tooltip?: string | React.ComponentProps<typeof TooltipContent>\n   } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n   (\n      {\n         asChild = false,\n         isActive = false,\n         variant = \"default\",\n         size = \"default\",\n         tooltip,\n         className,\n         ...props\n      },\n      ref,\n   ) => {\n      const Comp = asChild ? Slot : \"button\"\n      const { isMobile, state } = useSidebar()\n\n      const button = (\n         <Comp\n            ref={ref}\n            data-sidebar=\"menu-button\"\n            data-size={size}\n            data-active={isActive}\n            className={ny(\n               sidebarMenuButtonVariants({ variant, size }),\n               className,\n            )}\n            {...props}\n         />\n      )\n\n      if (!tooltip) {\n         return button\n      }\n\n      if (typeof tooltip === \"string\") {\n         tooltip = {\n            children: tooltip,\n         }\n      }\n\n      return (\n         <Tooltip>\n            <TooltipTrigger asChild>{button}</TooltipTrigger>\n            <TooltipContent\n               side=\"right\"\n               align=\"center\"\n               hidden={state !== \"collapsed\" || isMobile}\n               {...tooltip}\n            />\n         </Tooltip>\n      )\n   },\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n   HTMLButtonElement,\n   React.ComponentProps<\"button\"> & {\n      asChild?: boolean\n      showOnHover?: boolean\n   }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n   const Comp = asChild ? Slot : \"button\"\n\n   return (\n      <Comp\n         ref={ref}\n         data-sidebar=\"menu-action\"\n         className={ny(\n            \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-none transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n            // Increases the hit area of the button on mobile.\n            \"after:absolute after:-inset-2 after:md:hidden\",\n            \"peer-data-[size=sm]/menu-button:top-1\",\n            \"peer-data-[size=default]/menu-button:top-1.5\",\n            \"peer-data-[size=lg]/menu-button:top-2.5\",\n            \"group-data-[collapsible=icon]:hidden\",\n            showOnHover &&\n               \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n            className,\n         )}\n         {...props}\n      />\n   )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n   HTMLDivElement,\n   React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n   <div\n      ref={ref}\n      data-sidebar=\"menu-badge\"\n      className={ny(\n         \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums\",\n         \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n         \"peer-data-[size=sm]/menu-button:top-1\",\n         \"peer-data-[size=default]/menu-button:top-1.5\",\n         \"peer-data-[size=lg]/menu-button:top-2.5\",\n         \"group-data-[collapsible=icon]:hidden\",\n         className,\n      )}\n      {...props}\n   />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n   HTMLDivElement,\n   React.ComponentProps<\"div\"> & {\n      showIcon?: boolean\n   }\n>(({ className, showIcon = false, ...props }, ref) => {\n   // Random width between 50 to 90%.\n   const width = React.useMemo(() => {\n      return `${Math.floor(Math.random() * 40) + 50}%`\n   }, [])\n\n   return (\n      <div\n         ref={ref}\n         data-sidebar=\"menu-skeleton\"\n         className={ny(\n            \"flex h-8 items-center gap-2 rounded-md px-2\",\n            className,\n         )}\n         {...props}\n      >\n         {showIcon && (\n            <Skeleton\n               className=\"size-4 rounded-md\"\n               data-sidebar=\"menu-skeleton-icon\"\n            />\n         )}\n         <Skeleton\n            className=\"h-4 max-w-[--skeleton-width] flex-1\"\n            data-sidebar=\"menu-skeleton-text\"\n            style={\n               {\n                  \"--skeleton-width\": width,\n               } as React.CSSProperties\n            }\n         />\n      </div>\n   )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n   HTMLUListElement,\n   React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n   <ul\n      ref={ref}\n      data-sidebar=\"menu-sub\"\n      className={ny(\n         \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n         \"group-data-[collapsible=icon]:hidden\",\n         className,\n      )}\n      {...props}\n   />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n   HTMLLIElement,\n   React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n   HTMLAnchorElement,\n   React.ComponentProps<\"a\"> & {\n      asChild?: boolean\n      size?: \"sm\" | \"md\"\n      isActive?: boolean\n   }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n   const Comp = asChild ? Slot : \"a\"\n\n   return (\n      <Comp\n         ref={ref}\n         data-sidebar=\"menu-sub-button\"\n         data-size={size}\n         data-active={isActive}\n         className={ny(\n            \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-none focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n            \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n            size === \"sm\" && \"text-xs\",\n            size === \"md\" && \"text-sm\",\n            \"group-data-[collapsible=icon]:hidden\",\n            className,\n         )}\n         {...props}\n      />\n   )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n   Sidebar,\n   SidebarContent,\n   SidebarFooter,\n   SidebarGroup,\n   SidebarGroupAction,\n   SidebarGroupContent,\n   SidebarGroupLabel,\n   SidebarHeader,\n   SidebarInput,\n   SidebarInset,\n   SidebarMenu,\n   SidebarMenuAction,\n   SidebarMenuBadge,\n   SidebarMenuButton,\n   SidebarMenuItem,\n   SidebarMenuSkeleton,\n   SidebarMenuSub,\n   SidebarMenuSubButton,\n   SidebarMenuSubItem,\n   SidebarProvider,\n   SidebarRail,\n   SidebarSeparator,\n   SidebarTrigger,\n   useSidebar,\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "colors": {
            "sidebar": {
              "DEFAULT": "hsl(var(--sidebar-background))",
              "foreground": "hsl(var(--sidebar-foreground))",
              "primary": "hsl(var(--sidebar-primary))",
              "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
              "accent": "hsl(var(--sidebar-accent))",
              "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
              "border": "hsl(var(--sidebar-border))",
              "ring": "hsl(var(--sidebar-ring))"
            }
          }
        }
      }
    }
  },
  "cssVars": {
    "light": {
      "sidebar-background": "0 0% 98%",
      "sidebar-foreground": "240 5.3% 26.1%",
      "sidebar-primary": "240 5.9% 10%",
      "sidebar-primary-foreground": "0 0% 98%",
      "sidebar-accent": "240 4.8% 95.9%",
      "sidebar-accent-foreground": "240 5.9% 10%",
      "sidebar-border": "220 13% 91%",
      "sidebar-ring": "217.2 91.2% 59.8%"
    },
    "dark": {
      "sidebar-background": "240 5.9% 10%",
      "sidebar-foreground": "240 4.8% 95.9%",
      "sidebar-primary": "224.3 76.3% 48%",
      "sidebar-primary-foreground": "0 0% 100%",
      "sidebar-accent": "240 3.7% 15.9%",
      "sidebar-accent-foreground": "240 4.8% 95.9%",
      "sidebar-border": "240 3.7% 15.9%",
      "sidebar-ring": "217.2 91.2% 59.8%"
    }
  }
}