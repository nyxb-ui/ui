{
  "name": "hero-video",
  "files": [
    {
      "name": "hero-video.tsx",
      "content": "'use client'\n\nimport { Dialog, Transition } from '@headlessui/react'\nimport { X } from 'lucide-react'\nimport React, { Fragment, useContext, useState } from 'react'\nimport { ny } from '~/lib/utils'\n\ninterface HeroVideoProps {\n   children?: React.ReactNode\n   image?: string\n   className?: string\n   caption?: React.ReactNode\n   video?: string\n   title?: string\n}\n\ninterface HeroVideoContextType {\n   openModal?: () => void\n   closeModal?: () => void\n}\n\nconst HeroVideoContext = React.createContext<HeroVideoContextType>({})\n\nexport function HeroVideoAction({\n   children,\n}: {\n   children: React.ReactElement\n}) {\n   const context = useContext(HeroVideoContext)\n\n   if (!context)\n      throw new Error('HeroVideoAction must be used within a HeroVideo')\n\n   const { openModal } = context\n\n   // Create a clone of the child and inject the onClick event to it\n   const childWithOnClick = React.cloneElement(children, {\n      onClick: openModal,\n   })\n\n   return (\n      <div className=\"absolute left-1/2 top-1/2 z-50 -translate-x-1/2 -translate-y-1/2\">\n         {childWithOnClick}\n      </div>\n   )\n}\n\nfunction HeroVideo({ children, image, title = 'Demo' }: HeroVideoProps) {\n   const [isOpen, setIsOpen] = useState(false)\n\n   function closeModal() {\n      setIsOpen(false)\n   }\n\n   function openModal() {\n      setIsOpen(true)\n   }\n\n   // Extracting children based on type\n   let actionChild: React.ReactElement | null = null\n   const otherChildren: React.ReactElement[] = []\n\n   React.Children.forEach(children, (child) => {\n      if (React.isValidElement(child)) {\n         if (child.type === HeroVideoAction)\n            actionChild = child\n         else otherChildren.push(child)\n      }\n   })\n\n   return (\n      <HeroVideoContext.Provider value={{ openModal, closeModal }}>\n         <div\n            className={ny('absolute inset-px flex overflow-hidden rounded-2xl')}\n         >\n            {actionChild}\n            <img\n               className=\"pointer-events-none size-full object-cover\"\n               src={image}\n            />\n         </div>\n\n         {/* Modal */}\n         <Transition appear show={isOpen} as={Fragment}>\n            <Dialog as=\"div\" className=\"relative z-50\" onClose={closeModal}>\n               {/* Backdrop */}\n               <Transition.Child\n                  as={Fragment}\n                  enter=\"ease-out duration-500\"\n                  enterFrom=\"opacity-0\"\n                  enterTo=\"opacity-100\"\n                  leave=\"ease-in duration-200\"\n                  leaveFrom=\"opacity-100\"\n                  leaveTo=\"opacity-0\"\n               >\n                  <div className=\"bg-opacity/50 fixed inset-0 bg-black backdrop-blur-sm\" />\n               </Transition.Child>\n\n               {/* Video Modal */}\n               <div className=\"fixed inset-0 overflow-y-auto\">\n                  <div className=\"flex min-h-full items-center justify-center p-4 text-center\">\n                     <Transition.Child\n                        as={Fragment}\n                        enter=\"ease-out duration-500\"\n                        enterFrom=\"opacity-0 scale-95\"\n                        enterTo=\"opacity-100 scale-100\"\n                        leave=\"ease-in duration-200\"\n                        leaveFrom=\"opacity-100 scale-100\"\n                        leaveTo=\"opacity-0 scale-95\"\n                     >\n                        <Dialog.Panel className=\"flex w-full max-w-4xl flex-col gap-2 overflow-hidden rounded-2xl p-6 text-left align-middle transition-all\">\n                           <div className=\"flex flex-row items-center justify-between\">\n                              <h3 className=\"text-lg font-medium leading-6 text-gray-100\">\n                                 {title}\n                              </h3>\n                              {closeModal && (\n                                 <button\n                                    type=\"button\"\n                                    onClick={closeModal}\n                                    aria-label=\"Close\"\n                                 >\n                                    <X className=\"size-6 text-gray-100\" />\n                                 </button>\n                              )}\n                           </div>\n                           {otherChildren}\n                        </Dialog.Panel>\n                     </Transition.Child>\n                  </div>\n               </div>\n            </Dialog>\n         </Transition>\n      </HeroVideoContext.Provider>\n   )\n}\n\nexport default HeroVideo\n"
    }
  ],
  "type": "components:ui"
}
