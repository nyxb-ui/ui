{
  "name": "form",
  "dependencies": [
    "@radix-ui/react-label",
    "@radix-ui/react-slot",
    "@hookform/resolvers",
    "zod",
    "react-hook-form"
  ],
  "registryDependencies": [
    "button",
    "label"
  ],
  "files": [
    {
      "name": "form.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport type * as LabelPrimitive from '@radix-ui/react-label'\nimport { Slot } from '@radix-ui/react-slot'\nimport type { ControllerProps, FieldPath, FieldValues } from 'react-hook-form'\nimport { Controller, FormProvider, useFormContext, useFormState } from 'react-hook-form'\n\nimport { ny } from '~/lib/utils'\nimport { Label } from '~/registry/default/ui/label'\n\nconst Form = FormProvider\n\ninterface FormFieldContextValue<\n   TFieldValues extends FieldValues = FieldValues,\n   TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> {\n   name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n   {} as FormFieldContextValue,\n)\n\nfunction FormField<\n   TFieldValues extends FieldValues = FieldValues,\n   TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({ ...props }: ControllerProps<TFieldValues, TName>) {\n   return (\n      <FormFieldContext.Provider value={{ name: props.name }}>\n         <Controller {...props} />\n      </FormFieldContext.Provider>\n   )\n}\n\nfunction useFormField() {\n   const fieldContext = React.useContext(FormFieldContext)\n   const itemContext = React.useContext(FormItemContext)\n   const { getFieldState, formState } = useFormContext()\n\n   const fieldState = getFieldState(fieldContext.name, formState)\n\n   if (!fieldContext)\n      throw new Error('useFormField should be used within <FormField>')\n\n   const { id } = itemContext\n\n   return {\n      id,\n      name: fieldContext.name,\n      formItemId: `${id}-form-item`,\n      formDescriptionId: `${id}-form-item-description`,\n      formMessageId: `${id}-form-item-message`,\n      ...fieldState,\n   }\n}\n\ninterface FormItemContextValue {\n   id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n   {} as FormItemContextValue,\n)\n\nconst FormItem = React.forwardRef<\n   HTMLDivElement,\n   React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n   const id = React.useId()\n\n   return (\n      <FormItemContext.Provider value={{ id }}>\n         <div ref={ref} className={ny('space-y-2', className)} {...props} />\n      </FormItemContext.Provider>\n   )\n})\nFormItem.displayName = 'FormItem'\n\nconst FormLabel = React.forwardRef<\n   React.ElementRef<typeof LabelPrimitive.Root>,\n   React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n   const { error, formItemId } = useFormField()\n\n   return (\n      <Label\n         ref={ref}\n         className={ny(error && 'text-destructive', className)}\n         htmlFor={formItemId}\n         {...props}\n      />\n   )\n})\nFormLabel.displayName = 'FormLabel'\n\nconst FormControl = React.forwardRef<\n   React.ElementRef<typeof Slot>,\n   React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n   const { error, formItemId, formDescriptionId, formMessageId }\n    = useFormField()\n\n   return (\n      <Slot\n         ref={ref}\n         id={formItemId}\n         aria-describedby={\n            !error\n               ? `${formDescriptionId}`\n               : `${formDescriptionId} ${formMessageId}`\n         }\n         aria-invalid={!!error}\n         {...props}\n      />\n   )\n})\nFormControl.displayName = 'FormControl'\n\nconst FormDescription = React.forwardRef<\n   HTMLParagraphElement,\n   React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n   const { formDescriptionId } = useFormField()\n\n   return (\n      <p\n         ref={ref}\n         id={formDescriptionId}\n         className={ny('text-muted-foreground text-sm', className)}\n         {...props}\n      />\n   )\n})\nFormDescription.displayName = 'FormDescription'\n\nconst FormMessage = React.forwardRef<\n   HTMLParagraphElement,\n   React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n   const { error, formMessageId } = useFormField()\n   const body = error ? String(error?.message) : children\n\n   if (!body)\n      return null\n\n   return (\n      <p\n         ref={ref}\n         id={formMessageId}\n         className={ny('text-destructive text-sm font-medium', className)}\n         {...props}\n      >\n         {body}\n      </p>\n   )\n})\nFormMessage.displayName = 'FormMessage'\n\nconst FormGlobalError = React.forwardRef<\n   HTMLParagraphElement,\n   React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n   const { errors } = useFormState()\n   const rootError = errors.root\n   if (!rootError)\n      return null\n\n   return (\n      <p\n         ref={ref}\n         className={ny('text-destructive text-sm font-medium', className)}\n         {...props}\n      >\n         {rootError.message}\n      </p>\n   )\n})\nFormGlobalError.displayName = 'FormGlobalError'\n\nexport {\n   useFormField,\n   Form,\n   FormItem,\n   FormLabel,\n   FormControl,\n   FormDescription,\n   FormMessage,\n   FormGlobalError,\n   FormField,\n}\n"
    }
  ],
  "type": "components:ui"
}
