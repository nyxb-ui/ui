{
  "name": "carousel",
  "dependencies": [
    "embla-carousel-react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "name": "carousel.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport type { VariantProps } from 'class-variance-authority'\nimport { cva } from 'class-variance-authority'\nimport useEmblaCarousel, { type UseEmblaCarouselType } from 'embla-carousel-react'\nimport { ArrowLeft, ArrowRight } from 'lucide-react'\n\nimport { ny } from '~/lib/utils'\nimport { Button } from '~/registry/default/ui/button'\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ninterface CarouselProps {\n   opts?: CarouselOptions\n   plugins?: CarouselPlugin\n   setApi?: (api: CarouselApi) => void\n   orientation?: 'horizontal' | 'vertical'\n   dotsPosition?: 'top' | 'bottom' | 'left' | 'right'\n}\n\ntype CarouselContextProps = {\n   carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n   api: ReturnType<typeof useEmblaCarousel>[1]\n   scrollPrev: () => void\n   scrollNext: () => void\n   scrollTo: (index: number) => void\n   canScrollPrev: boolean\n   canScrollNext: boolean\n   totalSlides: number\n   currentIndex: number\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n   const context = React.useContext(CarouselContext)\n\n   if (!context)\n      throw new Error('useCarousel must be used within a <Carousel />')\n\n   return context\n}\n\nconst Carousel = React.forwardRef<\n   HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n   (\n      {\n         opts,\n         plugins,\n         setApi,\n         orientation = 'horizontal',\n         dotsPosition = 'bottom',\n         className,\n         children,\n         ...props\n      },\n      ref,\n   ) => {\n      const [carouselRef, api] = useEmblaCarousel(\n         {\n            ...opts,\n            axis: orientation === 'horizontal' ? 'x' : 'y',\n         },\n         plugins,\n      )\n      const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n      const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n      const [currentIndex, setCurrentIndex] = React.useState(0)\n      const [totalSlides, setTotalSlides] = React.useState(0)\n\n      const onSelect = React.useCallback((api: CarouselApi) => {\n         if (!api)\n            return\n\n         setCanScrollPrev(api.canScrollPrev())\n         setCanScrollNext(api.canScrollNext())\n         setCurrentIndex(api.selectedScrollSnap())\n         setTotalSlides(api.scrollSnapList().length)\n      }, [])\n\n      const scrollTo = React.useCallback(\n         (index: number) => {\n            api?.scrollTo(index)\n         },\n         [api],\n      )\n\n      const scrollPrev = React.useCallback(() => {\n         api?.scrollPrev()\n      }, [api])\n\n      const scrollNext = React.useCallback(() => {\n         api?.scrollNext()\n      }, [api])\n\n      const handleKeyDown = React.useCallback(\n         (event: React.KeyboardEvent<HTMLDivElement>) => {\n            if (event.key === 'ArrowLeft') {\n               event.preventDefault()\n               scrollPrev()\n            }\n            else if (event.key === 'ArrowRight') {\n               event.preventDefault()\n               scrollNext()\n            }\n         },\n         [scrollPrev, scrollNext],\n      )\n\n      React.useEffect(() => {\n         if (!api || !setApi)\n            return\n\n         setApi(api)\n      }, [api, setApi])\n\n      React.useEffect(() => {\n         if (!api)\n            return\n\n         onSelect(api)\n         api.on('reInit', onSelect)\n         api.on('select', onSelect)\n\n         return () => {\n            api?.off('select', onSelect)\n         }\n      }, [api, onSelect])\n\n      let effectiveDotsPosition = dotsPosition\n      if (\n         orientation === 'horizontal'\n         && (dotsPosition === 'left' || dotsPosition === 'right')\n      ) {\n         console.warn(\n        `Invalid dotsPosition \"${dotsPosition}\" for horizontal orientation, defaulting to \"bottom\".`,\n         )\n         effectiveDotsPosition = 'bottom'\n      }\n      else if (\n         orientation === 'vertical'\n         && (dotsPosition === 'top' || dotsPosition === 'bottom')\n      ) {\n         console.warn(\n        `Invalid dotsPosition \"${dotsPosition}\" for vertical orientation, defaulting to \"left\".`,\n         )\n         effectiveDotsPosition = 'left'\n      }\n\n      return (\n         <CarouselContext.Provider\n            value={{\n               carouselRef,\n               api,\n               opts,\n               orientation:\n            orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\n               dotsPosition: effectiveDotsPosition,\n               scrollPrev,\n               scrollNext,\n               scrollTo,\n               canScrollPrev,\n               canScrollNext,\n               totalSlides,\n               currentIndex,\n            }}\n         >\n            <div\n               ref={ref}\n               onKeyDownCapture={handleKeyDown}\n               className={ny('relative', className)}\n               role=\"region\"\n               aria-roledescription=\"carousel\"\n               {...props}\n            >\n               {children}\n            </div>\n         </CarouselContext.Provider>\n      )\n   },\n)\nCarousel.displayName = 'Carousel'\n\nconst CarouselContent = React.forwardRef<\n   HTMLDivElement,\n   React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n   const { carouselRef, orientation } = useCarousel()\n\n   return (\n      <div ref={carouselRef} className=\"overflow-hidden\">\n         <div\n            ref={ref}\n            className={ny(\n               'flex',\n               orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',\n               className,\n            )}\n            {...props}\n         />\n      </div>\n   )\n})\nCarouselContent.displayName = 'CarouselContent'\n\nconst CarouselItem = React.forwardRef<\n   HTMLDivElement,\n   React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n   const { orientation } = useCarousel()\n\n   return (\n      <div\n         ref={ref}\n         role=\"group\"\n         aria-roledescription=\"slide\"\n         className={ny(\n            'min-w-0 shrink-0 grow-0 basis-full',\n            orientation === 'horizontal' ? 'pl-4' : 'pt-4',\n            className,\n         )}\n         {...props}\n      />\n   )\n})\nCarouselItem.displayName = 'CarouselItem'\n\nconst CarouselPrevious = React.forwardRef<\n   HTMLButtonElement,\n   React.ComponentProps<typeof Button>\n>(({ className, variant = 'outline', size = 'icon', ...props }, ref) => {\n   const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n   return (\n      <Button\n         ref={ref}\n         variant={variant}\n         size={size}\n         className={ny(\n            'absolute  size-8 rounded-full',\n            orientation === 'horizontal'\n               ? '-left-12 top-1/2 -translate-y-1/2'\n               : '-top-12 left-1/2 -translate-x-1/2 rotate-90',\n            className,\n         )}\n         disabled={!canScrollPrev}\n         onClick={scrollPrev}\n         {...props}\n      >\n         <ArrowLeft className=\"size-4\" />\n         <span className=\"sr-only\">Previous slide</span>\n      </Button>\n   )\n})\nCarouselPrevious.displayName = 'CarouselPrevious'\n\nconst CarouselNext = React.forwardRef<\n   HTMLButtonElement,\n   React.ComponentProps<typeof Button>\n>(({ className, variant = 'outline', size = 'icon', ...props }, ref) => {\n   const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n   return (\n      <Button\n         ref={ref}\n         variant={variant}\n         size={size}\n         className={ny(\n            'absolute size-8 rounded-full',\n            orientation === 'horizontal'\n               ? '-right-12 top-1/2 -translate-y-1/2'\n               : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',\n            className,\n         )}\n         disabled={!canScrollNext}\n         onClick={scrollNext}\n         {...props}\n      >\n         <ArrowRight className=\"size-4\" />\n         <span className=\"sr-only\">Next slide</span>\n      </Button>\n   )\n})\nCarouselNext.displayName = 'CarouselNext'\n\nconst dotsContainerVariants = cva('absolute flex justify-center', {\n   variants: {\n      orientation: {\n         horizontal: 'inset-x-0 flex-row',\n         vertical: 'inset-y-0 flex-col',\n      },\n      size: {\n         default: 'p-4',\n         sm: 'p-4',\n         md: 'p-1',\n         lg: 'p-0',\n      },\n      position: {\n         top: '-top-10',\n         right: '-right-10',\n         bottom: '-bottom-10',\n         left: '-left-10',\n      },\n      gap: {\n         default: 'gap-2',\n         sm: 'gap-2',\n         md: 'gap-4',\n         lg: 'gap-6',\n      },\n   },\n   defaultVariants: {\n      orientation: 'horizontal',\n      size: 'default',\n      position: 'bottom',\n      gap: 'default',\n   },\n})\n\nconst dotsVariants = cva(\n   'rounded-full ring-1 ring-muted ring-offset-1 ring-offset-background transition-all duration-300',\n   {\n      variants: {\n         size: {\n            default: 'size-3',\n            sm: 'size-3',\n            md: 'size-4',\n            lg: 'size-6',\n         },\n      },\n      defaultVariants: {\n         size: 'default',\n      },\n   },\n)\n\ninterface CarouselDotsProps\n   extends React.HTMLAttributes<HTMLDivElement>,\n   VariantProps<typeof dotsContainerVariants>,\n   VariantProps<typeof dotsVariants> {}\n\nconst CarouselDots = React.forwardRef<HTMLDivElement, CarouselDotsProps>(\n   ({ className, size, gap, ...props }, ref) => {\n      const { orientation, dotsPosition, totalSlides, currentIndex, scrollTo }\n      = useCarousel()\n\n      if (totalSlides <= 1)\n         return null\n\n      return (\n         <div\n            ref={ref}\n            role=\"tablist\"\n            className={ny(\n               dotsContainerVariants({\n                  orientation,\n                  size,\n                  position: dotsPosition,\n                  gap,\n               }),\n               className,\n            )}\n            {...props}\n         >\n            {Array.from({ length: totalSlides }).map((_, index) => (\n               <button\n                  key={index}\n                  role=\"tab\"\n                  aria-selected={currentIndex === index}\n                  aria-label={`Go to slide ${index + 1}`}\n                  onClick={() => scrollTo(index)}\n                  className={ny(\n                     dotsVariants({ size }),\n                     currentIndex === index ? 'bg-card-foreground' : 'bg-muted',\n                  )}\n               />\n            ))}\n         </div>\n      )\n   },\n)\nCarouselDots.displayName = 'CarouselDots'\n\nexport {\n   type CarouselApi,\n   Carousel,\n   CarouselContent,\n   CarouselItem,\n   CarouselPrevious,\n   CarouselNext,\n   CarouselDots,\n}\n"
    }
  ],
  "type": "components:ui"
}
