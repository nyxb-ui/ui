{
  "name": "dock",
  "files": [
    {
      "name": "dock.tsx",
      "content": "'use client'\nimport { type VariantProps, cva } from 'class-variance-authority'\nimport { motion, useMotionValue, useSpring, useTransform } from 'framer-motion'\nimport type { PropsWithChildren } from 'react'\nimport React, { useRef } from 'react'\nimport { ny } from '~/lib/utils'\n\nexport interface DockProps extends VariantProps<typeof dockVariants> {\n   className?: string\n   magnification?: number\n   distance?: number\n   children: React.ReactNode\n}\n\nconst DEFAULT_MAGNIFICATION = 60\nconst DEFAULT_DISTANCE = 140\n\nconst dockVariants = cva(\n   'mx-auto w-max mt-8 h-[58px] p-2 flex items-end gap-2 rounded-2xl border dark:border-[#707070]',\n)\n\nconst Dock = React.forwardRef<HTMLDivElement, DockProps>(\n   (\n      {\n         className,\n         children,\n         magnification = DEFAULT_MAGNIFICATION,\n         distance = DEFAULT_DISTANCE,\n         ...props\n      },\n      ref,\n   ) => {\n      const mouseX = useMotionValue(Infinity)\n\n      const renderChildren = () => {\n         return React.Children.map(children, (child: any) => {\n            return React.cloneElement(child, {\n               mouseX,\n               magnification,\n               distance,\n            })\n         })\n      }\n\n      return (\n         <motion.div\n            ref={ref}\n            onMouseMove={e => mouseX.set(e.pageX)}\n            onMouseLeave={() => mouseX.set(Infinity)}\n            {...props}\n            className={ny(dockVariants({ className }), className)}\n         >\n            {renderChildren()}\n         </motion.div>\n      )\n   },\n)\n\nDock.displayName = 'Dock'\n\nexport interface DockIconProps {\n   size?: number\n   magnification?: number\n   distance?: number\n   mouseX?: any\n   className?: string\n   children?: React.ReactNode\n   props?: PropsWithChildren\n}\n\nfunction DockIcon({\n   size,\n   magnification = DEFAULT_MAGNIFICATION,\n   distance = DEFAULT_DISTANCE,\n   mouseX,\n   className,\n   children,\n   ...props\n}: DockIconProps) {\n   const ref = useRef<HTMLDivElement>(null)\n\n   const distanceCalc = useTransform(mouseX, (val: number) => {\n      const bounds = ref.current?.getBoundingClientRect() ?? { x: 0, width: 0 }\n\n      return val - bounds.x - bounds.width / 2\n   })\n\n   const widthSync = useTransform(\n      distanceCalc,\n      [-distance, 0, distance],\n      [40, magnification, 40],\n   )\n\n   const width = useSpring(widthSync, {\n      mass: 0.1,\n      stiffness: 150,\n      damping: 12,\n   })\n\n   return (\n      <motion.div\n         ref={ref}\n         style={{ width }}\n         className={ny(\n            'flex aspect-square cursor-pointer items-center justify-center rounded-full bg-neutral-400/40',\n            className,\n         )}\n         {...props}\n      >\n         {children}\n      </motion.div>\n   )\n}\n\nDockIcon.displayName = 'DockIcon'\n\nexport { Dock, DockIcon, dockVariants }\n"
    }
  ],
  "type": "components:ui"
}