{
  "name": "slider",
  "dependencies": [
    "@radix-ui/react-slider"
  ],
  "files": [
    {
      "name": "slider.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport * as SliderPrimitive from '@radix-ui/react-slider'\n\nimport { ny } from '~/lib/utils'\n\ninterface SliderProps extends React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root> {\n   showSteps?: 'none' | 'half' | 'full'\n   formatLabel?: (value: number) => string\n   formatLabelSide?: string\n}\n\nconst Slider = React.forwardRef<\n   React.ElementRef<typeof SliderPrimitive.Root>,\n   SliderProps\n>(({ className, showSteps = 'none', formatLabel, formatLabelSide = 'top', ...props }, ref) => {\n   const { min = 0, max = 100, step = 1, orientation = 'horizontal', value, defaultValue, onValueChange } = props\n   const [hoveredThumbIndex, setHoveredThumbIndex] = React.useState<boolean>(false)\n   const numberOfSteps = Math.floor((max - min) / step)\n   const stepLines = Array.from({ length: numberOfSteps }, (_, index) => index * step + min)\n\n   const initialValue = Array.isArray(value) ? value : (Array.isArray(defaultValue) ? defaultValue : [min, max])\n   const [localValues, setLocalValues] = React.useState<number[]>(initialValue)\n\n   React.useEffect(() => {\n      if (!isEqual(value, localValues))\n         setLocalValues(Array.isArray(value) ? value : (Array.isArray(defaultValue) ? defaultValue : [min, max]))\n   }, [min, max, value])\n\n   const handleValueChange = (newValues: number[]) => {\n      setLocalValues(newValues)\n      if (onValueChange)\n         onValueChange(newValues)\n   }\n\n   function isEqual(array1: number[] | undefined, array2: number[] | undefined) {\n      array1 = array1 ?? []\n      array2 = array2 ?? []\n\n      if (array1.length !== array2.length)\n         return false\n\n      for (let i = 0; i < array1.length; i++) {\n         if (array1[i] !== array2[i])\n            return false\n      }\n\n      return true\n   }\n\n   return (\n      <SliderPrimitive.Root\n         ref={ref}\n         className={ny(\n            'relative flex cursor-pointer touch-none select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n            orientation === 'horizontal' ? 'w-full items-center' : 'h-full justify-center',\n            className,\n         )}\n         min={min}\n         max={max}\n         step={step}\n         value={localValues}\n         onValueChange={value => handleValueChange(value)}\n         {...props}\n         onFocus={() => setHoveredThumbIndex(true)}\n         onBlur={() => setHoveredThumbIndex(false)}\n      >\n         <SliderPrimitive.Track className={ny(\n            'bg-primary/20 relative grow overflow-hidden rounded-full',\n            orientation === 'horizontal' ? 'h-1.5 w-full' : 'h-full w-1.5',\n         )}\n         >\n            <SliderPrimitive.Range className={ny(\n               'bg-primary absolute',\n               orientation === 'horizontal' ? 'h-full' : 'w-full',\n            )}\n            />\n            {showSteps !== undefined && showSteps !== 'none' && stepLines.map((value, index) => {\n               if (value === min || value === max)\n                  return null\n\n               const positionPercentage = ((value - min) / (max - min)) * 100\n               const adjustedPosition = 50 + (positionPercentage - 50) * 0.96\n               return (\n                  <div\n                     key={index}\n                     className={ny(\n                        { 'w-0.5 h-2': orientation !== 'vertical', 'w-2 h-0.5': orientation === 'vertical' },\n                        'bg-muted-foreground absolute',\n                        {\n                           'left-1': orientation === 'vertical' && showSteps === 'half',\n                           'top-1': orientation !== 'vertical' && showSteps === 'half',\n                           'left-0': orientation === 'vertical' && showSteps === 'full',\n                           'top-0': orientation !== 'vertical' && showSteps === 'full',\n                           '-translate-x-1/2': orientation !== 'vertical',\n                           '-translate-y-1/2': orientation === 'vertical',\n                        },\n                     )}\n                     style={{\n                        [orientation === 'vertical' ? 'bottom' : 'left']: `${adjustedPosition}%`,\n                     }}\n                  />\n               )\n            })}\n\n         </SliderPrimitive.Track>\n         {localValues.map((numberStep, index) => (\n            <SliderPrimitive.Thumb\n               key={index}\n               className={ny(\n                  'border-primary/50 bg-background focus-visible:ring-ring block size-4 rounded-full border shadow transition-colors focus-visible:outline-none focus-visible:ring-1',\n               )}\n            >\n               {hoveredThumbIndex && formatLabel && (\n                  <div\n                     className={ny(\n                        { 'bottom-8 left-1/2 -translate-x-1/2': formatLabelSide === 'top' },\n                        { 'top-8 left-1/2 -translate-x-1/2': formatLabelSide === 'bottom' },\n                        { 'right-8 -translate-y-1/4': formatLabelSide === 'left' },\n                        { 'left-8 -translate-y-1/4': formatLabelSide === 'right' },\n                        'bg-popover text-popover-foreground absolute z-30 w-max items-center justify-items-center rounded-md border px-2 py-1 text-center shadow-sm',\n                     )}\n                  >\n                     {formatLabel(numberStep)}\n                  </div>\n               )}\n            </SliderPrimitive.Thumb>\n         ))}\n      </SliderPrimitive.Root>\n   )\n})\n\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n"
    }
  ],
  "type": "components:ui"
}