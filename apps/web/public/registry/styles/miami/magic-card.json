{
  "name": "magic-card",
  "files": [
    {
      "name": "magic-card.tsx",
      "content": "'use client'\n\nimport type { CSSProperties, ReactElement, ReactNode } from 'react'\nimport { useEffect, useRef, useState } from 'react'\nimport { ny } from '~/lib/utils'\n\ninterface MousePosition {\n   x: number\n   y: number\n}\n\nfunction useMousePosition(): MousePosition {\n   const [mousePosition, setMousePosition] = useState<MousePosition>({\n      x: 0,\n      y: 0,\n   })\n\n   useEffect(() => {\n      const handleMouseMove = (event: globalThis.MouseEvent) => {\n         setMousePosition({ x: event.clientX, y: event.clientY })\n      }\n\n      window.addEventListener('mousemove', handleMouseMove)\n\n      return () => {\n         window.removeEventListener('mousemove', handleMouseMove)\n      }\n   }, [])\n\n   return mousePosition\n}\n\ninterface MagicContainerProps {\n   children?: ReactNode\n   className?: string\n}\n\nfunction MagicContainer({ children, className }: MagicContainerProps) {\n   const containerRef = useRef<HTMLDivElement>(null)\n   const mousePosition = useMousePosition()\n   const mouse = useRef<{ x: number, y: number }>({ x: 0, y: 0 })\n   const containerSize = useRef<{ w: number, h: number }>({ w: 0, h: 0 })\n   const [boxes, setBoxes] = useState<Array<HTMLElement>>([])\n\n   useEffect(() => {\n      init()\n      containerRef.current\n      && setBoxes(\n         Array.from(containerRef.current.children).map(el => el as HTMLElement),\n      )\n   }, [])\n\n   useEffect(() => {\n      init()\n      window.addEventListener('resize', init)\n\n      return () => {\n         window.removeEventListener('resize', init)\n      }\n   }, [setBoxes])\n\n   useEffect(() => {\n      onMouseMove()\n   }, [mousePosition])\n\n   const init = () => {\n      if (containerRef.current) {\n         containerSize.current.w = containerRef.current.offsetWidth\n         containerSize.current.h = containerRef.current.offsetHeight\n      }\n   }\n\n   const onMouseMove = () => {\n      if (containerRef.current) {\n         const rect = containerRef.current.getBoundingClientRect()\n         const { w, h } = containerSize.current\n         const x = mousePosition.x - rect.left\n         const y = mousePosition.y - rect.top\n         const inside = x < w && x > 0 && y < h && y > 0\n\n         mouse.current.x = x\n         mouse.current.y = y\n         boxes.forEach((box) => {\n            const boxX\n          = -(box.getBoundingClientRect().left - rect.left) + mouse.current.x\n            const boxY\n          = -(box.getBoundingClientRect().top - rect.top) + mouse.current.y\n            box.style.setProperty('--mouse-x', `${boxX}px`)\n            box.style.setProperty('--mouse-y', `${boxY}px`)\n\n            if (inside)\n               box.style.setProperty('--opacity', `1`)\n            else box.style.setProperty('--opacity', `0`)\n         })\n      }\n   }\n\n   return (\n      <div className={ny('size-full', className)} ref={containerRef}>\n         {children}\n      </div>\n   )\n}\n\ninterface MagicCardProps {\n   /**\n    * @default <div />\n    * @type ReactElement\n    * @description\n    * The component to be rendered as the card\n    */\n   as?: ReactElement\n   /**\n    * @default \"\"\n    * @type string\n    * @description\n    * The className of the card\n    */\n   className?: string\n\n   /**\n    * @default \"\"\n    * @type ReactNode\n    * @description\n    * The children of the card\n    */\n   children?: ReactNode\n\n   /**\n    * @default 600\n    * @type number\n    * @description\n    * The size of the spotlight effect in pixels\n    */\n   size?: number\n\n   /**\n    * @default true\n    * @type boolean\n    * @description\n    * Whether to show the spotlight\n    */\n   spotlight?: boolean\n\n   /**\n    * @default \"rgba(255,255,255,0.03)\"\n    * @type string\n    * @description\n    * The color of the spotlight\n    */\n   spotlightColor?: string\n\n   /**\n    * @default true\n    * @type boolean\n    * @description\n    * Whether to isolate the card which is being hovered\n    */\n   isolated?: boolean\n\n   /**\n    * @default \"rgba(255,255,255,0.03)\"\n    * @type string\n    * @description\n    * The background of the card\n    */\n   background?: string\n\n   [key: string]: any\n}\n\nconst MagicCard: React.FC<MagicCardProps> = ({\n   className,\n   children,\n   size = 600,\n   spotlight = true,\n   borderColor = 'hsl(0 0% 98%)',\n   isolated = true,\n   ...props\n}) => {\n   return (\n      <div\n         style={\n            {\n               '--mask-size': `${size}px`,\n               '--border-color': `${borderColor}`,\n            } as CSSProperties\n         }\n         className={ny(\n            'relative z-0 size-full rounded-2xl p-6',\n            'bg-gray-300 dark:bg-gray-700',\n            'bg-[radial-gradient(var(--mask-size)_circle_at_var(--mouse-x)_var(--mouse-y),var(--border-color),transparent_100%)]',\n            className,\n         )}\n         {...props}\n      >\n         {children}\n\n         {/* Background */}\n         <div className=\"absolute inset-px -z-20 rounded-2xl bg-white dark:bg-black/95\" />\n      </div>\n   )\n}\n\nexport { MagicCard, MagicContainer }\n"
    }
  ],
  "type": "components:ui"
}
