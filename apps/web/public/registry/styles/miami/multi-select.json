{
  "name": "multi-select",
  "files": [
    {
      "name": "multi-select.tsx",
      "content": "'use client'\n\nimport React from 'react'\nimport * as PopoverPrimitive from '@radix-ui/react-popover'\nimport type { Primitive } from '@radix-ui/react-primitive'\nimport { useControllableState } from '@radix-ui/react-use-controllable-state'\nimport { Check, ChevronsUpDown, X } from 'lucide-react'\nimport { createPortal } from 'react-dom'\n\nimport { ny } from '~/lib/utils'\nimport { Badge } from '~/registry/miami/ui/badge'\nimport {\n   Command,\n   CommandEmpty,\n   CommandGroup,\n   CommandInput,\n   CommandItem,\n   CommandList,\n   CommandSeparator,\n} from '~/registry/default/ui/command'\nimport {\n   Tooltip,\n   TooltipContent,\n   TooltipProvider,\n   TooltipTrigger,\n} from '~/registry/default/ui/tooltip'\n\nexport interface MultiSelectOptionItem {\n   value: string\n   label?: React.ReactNode\n}\n\ninterface MultiSelectContextValue {\n   value: string[]\n\n   open: boolean\n\n   onSelect: (value: string, item: MultiSelectOptionItem) => void\n\n   onDeselect: (value: string, item: MultiSelectOptionItem) => void\n\n   onSearch?: (keyword?: string) => void\n\n   filter?: boolean | ((keyword: string, current: string) => boolean)\n\n   disabled?: boolean\n\n   maxCount?: number\n\n   itemCache: Map<string, MultiSelectOptionItem>\n}\n\nconst MultiSelectContext = React.createContext<\n  MultiSelectContextValue | undefined\n>(undefined)\n\nfunction useMultiSelect() {\n   const context = React.useContext(MultiSelectContext)\n\n   if (!context)\n      throw new Error('useMultiSelect must be used within MultiSelectProvider')\n\n   return context\n}\n\ntype MultiSelectProps = React.ComponentPropsWithoutRef<\n  typeof PopoverPrimitive.Root\n> & {\n   value?: string[]\n   onValueChange?: (value: string[], items: MultiSelectOptionItem[]) => void\n   onSelect?: (value: string, item: MultiSelectOptionItem) => void\n   onDeselect?: (value: string, item: MultiSelectOptionItem) => void\n   defaultValue?: string[]\n   onSearch?: (keyword: string | undefined) => void\n   filter?: boolean | ((keyword: string, current: string) => boolean)\n   disabled?: boolean\n   maxCount?: number\n}\n\nconst MultiSelect: React.FC<MultiSelectProps> = ({\n   value: valueProp,\n   onValueChange: onValueChangeProp,\n   onDeselect: onDeselectProp,\n   onSelect: onSelectProp,\n   defaultValue,\n   open: openProp,\n   onOpenChange,\n   defaultOpen,\n   onSearch,\n   filter,\n   disabled,\n   maxCount,\n   ...popoverProps\n}) => {\n   const itemCache = React.useRef(\n      new Map<string, MultiSelectOptionItem>(),\n   ).current\n\n   const handleValueChange = React.useCallback(\n      (state: string[]) => {\n         if (onValueChangeProp) {\n            const items = state.map(value => itemCache.get(value)!)\n\n            onValueChangeProp(state, items)\n         }\n      },\n      [onValueChangeProp],\n   )\n\n   const [value, setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue,\n      onChange: handleValueChange,\n   })\n\n   const [open, setOpen] = useControllableState({\n      prop: openProp,\n      defaultProp: defaultOpen,\n      onChange: onOpenChange,\n   })\n\n   const handleSelect = React.useCallback(\n      (value: string, item: MultiSelectOptionItem) => {\n         setValue((prev) => {\n            if (prev?.includes(value))\n               return prev\n\n            onSelectProp?.(value, item)\n\n            return prev ? [...prev, value] : [value]\n         })\n      },\n      [onSelectProp, setValue],\n   )\n\n   const handleDeselect = React.useCallback(\n      (value: string, item: MultiSelectOptionItem) => {\n         setValue((prev) => {\n            if (!prev || !prev.includes(value))\n               return prev\n\n            onDeselectProp?.(value, item)\n\n            return prev.filter(v => v !== value)\n         })\n      },\n      [onDeselectProp, setValue],\n   )\n\n   const contextValue = React.useMemo(() => {\n      return {\n         value: value || [],\n         open: open || false,\n         onSearch,\n         filter,\n         disabled,\n         maxCount,\n         onSelect: handleSelect,\n         onDeselect: handleDeselect,\n         itemCache,\n      }\n   }, [\n      value,\n      open,\n      onSearch,\n      filter,\n      disabled,\n      maxCount,\n      handleSelect,\n      handleDeselect,\n   ])\n\n   return (\n      <MultiSelectContext.Provider value={contextValue}>\n         <PopoverPrimitive.Root\n            {...popoverProps}\n            open={open}\n            onOpenChange={setOpen}\n         />\n      </MultiSelectContext.Provider>\n   )\n}\n\nMultiSelect.displayName = 'MultiSelect'\n\ntype MultiSelectTriggerElement = React.ElementRef<typeof Primitive.div>\n\ninterface MultiSelectTriggerProps\n   extends React.ComponentPropsWithoutRef<typeof Primitive.div> {}\n\nfunction PreventClick(e: React.MouseEvent | React.TouchEvent) {\n   e.preventDefault()\n   e.stopPropagation()\n}\n\nconst MultiSelectTrigger = React.forwardRef<\n   MultiSelectTriggerElement,\n   MultiSelectTriggerProps\n>(({ className, children, ...props }, forwardedRef) => {\n   const { disabled } = useMultiSelect()\n\n   return (\n      <PopoverPrimitive.Trigger ref={forwardedRef as any} asChild>\n         <div\n            aria-disabled={disabled}\n            data-disabled={disabled}\n            {...props}\n            className={ny(\n               'border-input ring-offset-background focus:ring-ring flex size-full min-h-10 items-center justify-between whitespace-nowrap rounded-md border bg-transparent px-3 py-2 text-sm shadow-sm focus:outline-none focus:ring-1 [&>span]:line-clamp-1',\n               disabled ? 'cursor-not-allowed opacity-50' : 'cursor-text',\n               className,\n            )}\n            onClick={disabled ? PreventClick : props.onClick}\n            onTouchStart={disabled ? PreventClick : props.onTouchStart}\n         >\n            {children}\n            <ChevronsUpDown aria-hidden className=\"size-4 shrink-0 opacity-50\" />\n         </div>\n      </PopoverPrimitive.Trigger>\n   )\n})\n\nMultiSelectTrigger.displayName = 'MultiSelectTrigger'\n\ninterface MultiSelectValueProps\n   extends React.ComponentPropsWithoutRef<typeof Primitive.div> {\n   placeholder?: string\n   maxDisplay?: number\n   maxItemLength?: number\n}\n\nconst MultiSelectValue = React.forwardRef<\n   React.ElementRef<typeof Primitive.div>,\n   MultiSelectValueProps\n>(\n   (\n      { className, placeholder, maxDisplay, maxItemLength, ...props },\n      forwardRef,\n   ) => {\n      const { value, itemCache, onDeselect } = useMultiSelect()\n      const [firstRendered, setFirstRendered] = React.useState(false)\n\n      const renderRemain\n      = maxDisplay && value.length > maxDisplay ? value.length - maxDisplay : 0\n      const renderItems = renderRemain ? value.slice(0, maxDisplay) : value\n\n      React.useLayoutEffect(() => {\n         setFirstRendered(true)\n      }, [])\n\n      if (!value.length || !firstRendered) {\n         return (\n            <span className=\"text-muted-foreground pointer-events-none\">\n               {placeholder}\n            </span>\n         )\n      }\n\n      return (\n         <TooltipProvider delayDuration={300}>\n            <div\n               className={ny(\n                  'flex flex-1 flex-wrap items-center gap-1.5 overflow-x-hidden',\n                  className,\n               )}\n               {...props}\n               ref={forwardRef}\n            >\n               {renderItems.map((value) => {\n                  const item = itemCache.get(value)\n\n                  const content = item?.label || value\n\n                  const child\n              = maxItemLength\n              && typeof content === 'string'\n              && content.length > maxItemLength\n                 ? `${content.slice(0, maxItemLength)}...`\n                 : content\n\n                  const el = (\n                     <Badge\n                        variant=\"outline\"\n                        key={value}\n                        className=\"group/multi-select-badge cursor-pointer rounded-full pr-1.5\"\n                        onClick={(e) => {\n                           e.preventDefault()\n                           e.stopPropagation()\n                           onDeselect(value, item!)\n                        }}\n                     >\n                        <span>{child}</span>\n                        <X className=\"text-muted-foreground group-hover/multi-select-badge:text-foreground ml-1 size-3\" />\n                     </Badge>\n                  )\n\n                  if (child !== content) {\n                     return (\n                        <Tooltip key={value}>\n                           <TooltipTrigger className=\"inline-flex\">{el}</TooltipTrigger>\n                           <TooltipContent\n                              side=\"bottom\"\n                              align=\"start\"\n                              className=\"z-[51]\"\n                           >\n                              {content}\n                           </TooltipContent>\n                        </Tooltip>\n                     )\n                  }\n\n                  return el\n               })}\n               {renderRemain\n                  ? (\n                        <span className=\"text-muted-foreground py-.5 text-xs leading-4\">\n                           +\n                           {renderRemain}\n                        </span>\n                     )\n                  : null}\n            </div>\n         </TooltipProvider>\n      )\n   },\n)\n\nconst MultiSelectSearch = React.forwardRef<\n   React.ElementRef<typeof CommandInput>,\n   React.ComponentPropsWithoutRef<typeof CommandInput>\n>((props, ref) => {\n   const { onSearch } = useMultiSelect()\n\n   return <CommandInput ref={ref} {...props} onValueChange={onSearch} />\n})\n\nMultiSelectSearch.displayName = 'MultiSelectSearch'\n\nconst MultiSelectList = React.forwardRef<\n   React.ElementRef<typeof CommandList>,\n   React.ComponentPropsWithoutRef<typeof CommandList>\n>(({ className, ...props }, ref) => {\n   return (\n      <CommandList\n         ref={ref}\n         className={ny('max-h-[unset] px-0 py-1', className)}\n         {...props}\n      />\n   )\n})\n\nMultiSelectList.displayName = 'MultiSelectList'\n\ninterface MultiSelectContentProps\n   extends React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content> {}\n\nconst MultiSelectContent = React.forwardRef<\n   React.ElementRef<typeof PopoverPrimitive.Content>,\n   MultiSelectContentProps\n>(({ className, children, ...props }, ref) => {\n   const context = useMultiSelect()\n\n   const fragmentRef = React.useRef<DocumentFragment>()\n\n   if (!fragmentRef.current && typeof window !== 'undefined')\n      fragmentRef.current = document.createDocumentFragment()\n\n   if (!context.open) {\n      return fragmentRef.current\n         ? createPortal(<Command>{children}</Command>, fragmentRef.current)\n         : null\n   }\n\n   return (\n      <PopoverPrimitive.Portal forceMount>\n         <PopoverPrimitive.Content\n            ref={ref}\n            align=\"start\"\n            sideOffset={4}\n            collisionPadding={10}\n            className={ny(\n               'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-full rounded-md border p-0 shadow-md outline-none',\n            )}\n            style={\n               {\n                  '--radix-select-content-transform-origin':\n              'var(--radix-popper-transform-origin)',\n                  '--radix-select-content-available-width':\n              'var(--radix-popper-available-width)',\n                  '--radix-select-content-available-height':\n              'var(--radix-popper-available-height)',\n                  '--radix-select-trigger-width': 'var(--radix-popper-anchor-width)',\n                  '--radix-select-trigger-height':\n              'var(--radix-popper-anchor-height)',\n               } as any\n            }\n            {...props}\n         >\n            <Command\n               className={ny(\n                  'max-h-96 w-full min-w-[var(--radix-select-trigger-width)] px-1',\n                  className,\n               )}\n               shouldFilter={!context.onSearch}\n            >\n               {children}\n            </Command>\n         </PopoverPrimitive.Content>\n      </PopoverPrimitive.Portal>\n   )\n})\n\ntype MultiSelectItemProps = React.ComponentPropsWithoutRef<typeof CommandItem> &\n   Partial<MultiSelectOptionItem> & {\n      onSelect?: (value: string, item: MultiSelectOptionItem) => void\n      onDeselect?: (value: string, item: MultiSelectOptionItem) => void\n   }\n\nconst MultiSelectItem = React.forwardRef<\n   React.ElementRef<typeof CommandItem>,\n   MultiSelectItemProps\n>(\n   (\n      {\n         value,\n         onSelect: onSelectProp,\n         onDeselect: onDeselectProp,\n         children,\n         label,\n         disabled: disabledProp,\n         className,\n         ...props\n      },\n      forwardedRef,\n   ) => {\n      const {\n         value: contextValue,\n         maxCount,\n         onSelect,\n         onDeselect,\n         itemCache,\n      } = useMultiSelect()\n\n      const item = React.useMemo(() => {\n         return value\n            ? {\n                  value,\n                  label:\n              label || (typeof children === 'string' ? children : undefined),\n               }\n            : undefined\n      }, [value, label, children])\n\n      const selected = Boolean(value && contextValue.includes(value))\n\n      React.useEffect(() => {\n         if (value)\n            itemCache.set(value, item!)\n      }, [selected, value, item])\n\n      const disabled = Boolean(\n         disabledProp || (!selected && maxCount && contextValue.length >= maxCount),\n      )\n\n      const handleClick = () => {\n         if (selected) {\n            onDeselectProp?.(value!, item!)\n            onDeselect(value!, item!)\n         }\n         else {\n            itemCache.set(value!, item!)\n            onSelectProp?.(value!, item!)\n            onSelect(value!, item!)\n         }\n      }\n\n      return (\n         <CommandItem\n            {...props}\n            value={value}\n            className={ny(\n               disabled && 'text-muted-foreground cursor-not-allowed',\n               className,\n            )}\n            disabled={disabled}\n            onSelect={!disabled && value ? handleClick : undefined}\n            ref={forwardedRef}\n         >\n            <span className=\"mr-2 truncate\">\n               {children || label || value}\n            </span>\n            {selected ? <Check className=\"ml-auto size-4 shrink-0\" /> : null}\n         </CommandItem>\n      )\n   },\n)\n\nconst MultiSelectGroup = React.forwardRef<\n   React.ElementRef<typeof CommandGroup>,\n   React.ComponentPropsWithoutRef<typeof CommandGroup>\n>((props, forwardRef) => {\n   return <CommandGroup {...props} ref={forwardRef} />\n})\n\nMultiSelectGroup.displayName = 'MultiSelectGroup'\n\nconst MultiSelectSeparator = React.forwardRef<\n   React.ElementRef<typeof CommandSeparator>,\n   React.ComponentPropsWithoutRef<typeof CommandSeparator>\n>((props, forwardRef) => {\n   return <CommandSeparator {...props} ref={forwardRef} />\n})\n\nMultiSelectSeparator.displayName = 'MultiSelectSeparator'\n\nconst MultiSelectEmpty = React.forwardRef<\n   React.ElementRef<typeof CommandEmpty>,\n   React.ComponentPropsWithoutRef<typeof CommandEmpty>\n>(({ children = 'No Content', ...props }, forwardRef) => {\n   return (\n      <CommandEmpty {...props} ref={forwardRef}>\n         {children}\n      </CommandEmpty>\n   )\n})\n\nMultiSelectEmpty.displayName = 'MultiSelectEmpty'\n\nexport interface MultiSelectOptionSeparator {\n   type: 'separator'\n}\n\nexport interface MultiSelectOptionGroup {\n   heading?: React.ReactNode\n   value?: string\n   children: MultiSelectOption[]\n}\n\nexport type MultiSelectOption =\n   | Pick<\n      MultiSelectItemProps,\n      'value' | 'label' | 'disabled' | 'onSelect' | 'onDeselect'\n   >\n   | MultiSelectOptionSeparator\n   | MultiSelectOptionGroup\n\nfunction renderMultiSelectOptions(list: MultiSelectOption[]) {\n   return list.map((option, index) => {\n      if ('type' in option) {\n         if (option.type === 'separator')\n            return <MultiSelectSeparator key={index} />\n\n         return null\n      }\n\n      if ('children' in option) {\n         return (\n            <MultiSelectGroup\n               key={option.value || index}\n               value={option.value}\n               heading={option.heading}\n            >\n               {renderMultiSelectOptions(option.children)}\n            </MultiSelectGroup>\n         )\n      }\n\n      return (\n         <MultiSelectItem key={option.value} {...option}>\n            {option.label}\n         </MultiSelectItem>\n      )\n   })\n}\n\nexport {\n   MultiSelect,\n   MultiSelectTrigger,\n   MultiSelectValue,\n   MultiSelectSearch,\n   MultiSelectContent,\n   MultiSelectList,\n   MultiSelectItem,\n   MultiSelectGroup,\n   MultiSelectSeparator,\n   MultiSelectEmpty,\n   renderMultiSelectOptions,\n}\n"
    }
  ],
  "type": "components:ui"
}